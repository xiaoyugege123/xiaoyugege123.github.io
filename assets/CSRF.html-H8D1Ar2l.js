import{_ as o,r as p,o as i,c as l,a as n,b as a,d as e,e as t}from"./app-Bn7XLESk.js";const c={},r=n("h1",{id:"csrf-如何防御csrf攻击",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#csrf-如何防御csrf攻击"},[n("span",null,"CSRF，如何防御CSRF攻击")])],-1),u={href:"https://owasp.org/www-community/attacks/csrf",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="一个典型的csrf攻击有着如下的流程" tabindex="-1"><a class="header-anchor" href="#一个典型的csrf攻击有着如下的流程"><span>一个典型的CSRF攻击有着如下的流程</span></a></h2><ul><li>受害者登录a.com，并保留了登录凭证（Cookie）。</li><li>攻击者引诱受害者访问了b.com。</li><li>b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie。</li><li>a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。</li><li>a.com以受害者的名义执行了act=xx。</li><li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。</li></ul><h2 id="几种常见的攻击类型" tabindex="-1"><a class="header-anchor" href="#几种常见的攻击类型"><span>几种常见的攻击类型</span></a></h2><p><strong>GET类型的CSRF</strong> GET类型的CSRF利用非常简单，只需要一个HTTP请求，一般会这样利用：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>![](http://bank.example/withdraw?account=xiaoming&amp;amount=10000&amp;for=hacker)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在受害者访问含有这个img的页面后，浏览器会自动向http://bank.example/withdraw?account=xiaoming&amp;amount=10000&amp;for=hacker发出一次HTTP请求。bank.example就会收到包含受害者登录信息的一次跨域请求。 <strong>POST类型的CSRF</strong> 这种类型的CSRF利用起来通常使用的是一个自动提交的表单，如：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://bank.example/withdraw<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>POST</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>account<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xiaoming<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>amount<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>for<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hacker<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作。 POST类型的攻击通常比GET要求更加严格一点，但仍并不复杂。任何个人网站、博客，被黑客上传页面的网站都有可能是发起攻击的来源，后端接口不能将安全寄托在仅允许POST上面。 <strong>链接类型的CSRF</strong> 链接类型的CSRF并不常见，比起其他两种用户打开页面就中招的情况，这种需要用户点击链接才会触发。这种类型通常是在论坛中发布的图片中嵌入恶意链接，或者以广告的形式诱导用户中招，攻击者通常会以比较夸张的词语诱骗用户点击，例如：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://test.com/csrf/withdraw.php?amount=1000&amp;for=hacker<span class="token punctuation">&quot;</span></span> <span class="token attr-name">taget</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_blank<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  重磅消息！！
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于之前用户登录了信任的网站A，并且保存登录状态，只要用户主动访问上面的这个PHP页面，则表示攻击成功。</p><h2 id="如何进行防御" tabindex="-1"><a class="header-anchor" href="#如何进行防御"><span>如何进行防御</span></a></h2><blockquote><p>CSRF通常从第三方网站发起，被攻击的网站无法防止攻击发生，只能通过增强自己网站针对CSRF的防护能力来提升安全性。 上文中讲了CSRF的两个特点：</p><ul><li>CSRF（通常）发生在第三方域名。</li><li>CSRF攻击者不能获取到Cookie等信息，只是使用。</li></ul></blockquote><p>针对这两点，我们可以专门制定防护策略，如下：</p><blockquote><ul><li>阻止不明外域的访问 <ul><li>同源检测</li><li>Samesite Cookie</li></ul></li><li>提交时要求附加本域才能获取的信息 <ul><li>CSRF Token</li><li>双重Cookie验证</li></ul></li></ul></blockquote><h3 id="同源检测" tabindex="-1"><a class="header-anchor" href="#同源检测"><span>同源检测</span></a></h3><blockquote><p>既然CSRF大多来自第三方网站，那么我们就直接禁止外域（或者不受信任的域名）对我们发起请求。 那么问题来了，我们如何判断请求是否来自外域呢？ 在HTTP协议中，每一个异步请求都会携带两个Header，用于标记来源域名：</p><ul><li>Origin Header</li><li>Referer Header</li></ul></blockquote><p>这两个Header在浏览器发起请求时，大多数情况会自动带上，并且不能由前端自定义内容。 服务器可以通过解析这两个Header中的域名，确定请求的来源域。</p><h4 id="使用origin-header确定来源域名" tabindex="-1"><a class="header-anchor" href="#使用origin-header确定来源域名"><span>使用Origin Header确定来源域名</span></a></h4><p>在部分与CSRF有关的请求中，请求的Header中会携带Origin字段。字段内包含请求的域名（不包含path及query）。 如果Origin存在，那么直接使用Origin中的字段确认来源域名就可以。 但是Origin在以下两种情况下并不存在：</p>`,19),d=n("strong",null,"IE11同源策略：",-1),m={href:"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#IE_Exceptions",target:"_blank",rel:"noopener noreferrer"},h=n("li",null,[n("strong",null,"302重定向："),a(" 在302重定向之后Origin不包含在重定向的请求中，因为Origin可能会被认为是其他来源的敏感信息。对于302重定向的情况来说都是定向到新的服务器上的URL，因此浏览器不想将Origin泄漏到新的服务器上。")],-1),v=t(`<h4 id="使用referer-header确定来源域名" tabindex="-1"><a class="header-anchor" href="#使用referer-header确定来源域名"><span>使用Referer Header确定来源域名</span></a></h4><p>根据HTTP协议，在HTTP头中有一个字段叫Referer，记录了该HTTP请求的来源地址。 对于Ajax请求，图片和script等资源请求，Referer为发起请求的页面地址。对于页面跳转，Referer为打开页面历史记录的前一个页面地址。因此我们使用Referer中链接的Origin部分可以得知请求的来源域名。 这种方法并非万无一失，Referer的值是由浏览器提供的，虽然HTTP协议上有明确的要求，但是每个浏览器对于Referer的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不是很安全。在部分情况下，攻击者可以隐藏，甚至修改自己请求的Referer。 2014年，W3C的Web应用安全工作组发布了Referrer Policy草案，对浏览器该如何发送Referer做了详细的规定。截止现在新版浏览器大部分已经支持了这份草案，我们终于可以灵活地控制自己网站的Referer策略了。新版的Referrer Policy规定了五种Referer策略：No Referrer、No Referrer When Downgrade、Origin Only、Origin When Cross-origin、和 Unsafe URL。之前就存在的三种策略：never、default和always，在新标准里换了个名称。他们的对应关系如下：</p><table><thead><tr><th><strong>策略名称</strong></th><th><strong>属性值（新）</strong></th><th><strong>属性值（旧）</strong></th></tr></thead><tbody><tr><td>No Referrer</td><td>no-Referrer</td><td>never</td></tr><tr><td>No Referrer When Downgrade</td><td>no-Referrer-when-downgrade</td><td>default</td></tr><tr><td>Origin Only</td><td>(same or strict) origin</td><td>origin</td></tr><tr><td>Origin When Cross Origin</td><td>(strict) origin-when-crossorigin</td><td>-</td></tr><tr><td>Unsafe URL</td><td>unsafe-url</td><td>always</td></tr></tbody></table><p>根据上面的表格因此需要把Referrer Policy的策略设置成same-origin，对于同源的链接和引用，会发送Referer，referer值为Host不带Path；跨域访问则不携带Referer。例如：aaa.com引用bbb.com的资源，不会发送Referer。 设置Referrer Policy的方法有三种：</p><ol><li>在CSP设置</li><li>页面头部增加meta标签</li><li>a标签增加referrerpolicy属性</li></ol><p>上面说的这些比较多，但我们可以知道一个问题：攻击者可以在自己的请求中隐藏Referer。如果攻击者将自己的请求这样填写：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>![](https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/ff0cdbee.example/withdraw?amount=10000&amp;for=hacker)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么这个请求发起的攻击将不携带Referer。 另外在以下情况下Referer没有或者不可信：</p><ol><li>IE6、7下使用window.location.href=url进行界面的跳转，会丢失Referer。</li><li>IE6、7下使用window.open，也会缺失Referer。</li><li>HTTPS页面跳转到HTTP页面，所有浏览器Referer都丢失。</li><li>点击Flash上到达另外一个网站的时候，Referer的情况就比较杂乱，不太可信。</li></ol><h4 id="无法确认来源域名情况" tabindex="-1"><a class="header-anchor" href="#无法确认来源域名情况"><span>无法确认来源域名情况</span></a></h4><p>当Origin和Referer头文件不存在时该怎么办？如果Origin和Referer都不存在，建议直接进行阻止，特别是如果您没有使用随机CSRF Token（参考下方）作为第二次检查。</p><h4 id="如何阻止外域请求" tabindex="-1"><a class="header-anchor" href="#如何阻止外域请求"><span>如何阻止外域请求</span></a></h4><p>通过Header的验证，我们可以知道发起请求的来源域名，这些来源域名可能是网站本域，或者子域名，或者有授权的第三方域名，又或者来自不可信的未知域名。 我们已经知道了请求域名是否是来自不可信的域名，我们直接阻止掉这些的请求，就能防御CSRF攻击了吗？ 且慢！当一个请求是页面请求（比如网站的主页），而来源是搜索引擎的链接（例如百度的搜索结果），也会被当成疑似CSRF攻击。所以在判断的时候需要过滤掉页面请求情况，通常Header符合以下情况：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Accept: text/html
Method: GET
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但相应的，页面请求就暴露在了CSRF的攻击范围之中。如果你的网站中，在页面的GET请求中对当前用户做了什么操作的话，防范就失效了。 例如，下面的页面请求：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>GET https://example.com/addComment?comment=XXX&amp;dest=orderId
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注：这种严格来说并不一定存在CSRF攻击的风险，但仍然有很多网站经常把主文档GET请求挂上参数来实现产品功能，但是这样做对于自身来说是存在安全风险的。 另外，前面说过，CSRF大多数情况下来自第三方域名，但并不能排除本域发起。如果攻击者有权限在本域发布评论（含链接、图片等，统称UGC），那么它可以直接在本域发起攻击，这种情况下同源策略无法达到防护的作用。 综上所述：同源验证是一个相对简单的防范方法，能够防范绝大多数的CSRF攻击。但这并不是万无一失的，对于安全性要求较高，或者有较多用户输入内容的网站，我们就要对关键的接口做额外的防护措施。</p><h3 id="csrf-token" tabindex="-1"><a class="header-anchor" href="#csrf-token"><span>CSRF Token</span></a></h3><p>前面讲到CSRF的另一个特征是，攻击者无法直接窃取到用户的信息（Cookie，Header，网站内容等），仅仅是冒用Cookie中的信息。 而CSRF攻击之所以能够成功，是因为服务器误把攻击者发送的请求当成了用户自己的请求。那么我们可以要求所有的用户请求都携带一个CSRF攻击者无法获取到的Token。服务器通过校验请求是否携带正确的Token，来把正常的请求和攻击的请求区分开，也可以防范CSRF的攻击。</p><h4 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h4>`,20),g=n("strong",null,"1. 将CSRF Token输出到页面中",-1),f=n("strong",null,"2. 页面提交的请求携带这个Token",-1),S={href:"http://url/?csrftoken=tokenvalue%E3%80%82",target:"_blank",rel:"noopener noreferrer"},C=t(`<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”hidden”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”csrftoken”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”tokenvalue”/</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，就把Token以参数的形式加入请求了。 <strong>3. 服务器验证Token是否正确</strong> 当用户从客户端得到了Token，再次提交给服务器的时候，服务器需要判断Token的有效性，验证过程是先解密Token，对比加密字符串以及时间戳，如果加密字符串一致且时间未过期，那么这个Token就是有效的。 这种方法要比之前检查Referer或者Origin要安全一些，Token可以在产生并放于Session之中，然后在每次请求时把Token从Session中拿出，与请求中的Token进行比对，但这种方法的比较麻烦的在于如何把Token以参数的形式加入请求。 下面将以Java为例，介绍一些CSRF Token的服务端校验逻辑，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span>request<span class="token punctuation">;</span> 
<span class="token class-name">HttpSession</span> s <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
<span class="token comment">// 从 session 中得到 csrftoken 属性</span>
<span class="token class-name">String</span> sToken <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;csrftoken&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">if</span><span class="token punctuation">(</span>sToken <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
   <span class="token comment">// 产生新的 token 放入 session 中</span>
   sToken <span class="token operator">=</span> <span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
   s<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;csrftoken&quot;</span><span class="token punctuation">,</span>sToken<span class="token punctuation">)</span><span class="token punctuation">;</span> 
   chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span> 
   <span class="token comment">// 从 HTTP 头中取得 csrftoken </span>
   <span class="token class-name">String</span> xhrToken <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>“csrftoken”<span class="token punctuation">)</span><span class="token punctuation">;</span> 
   <span class="token comment">// 从请求参数中取得 csrftoken </span>
   <span class="token class-name">String</span> pToken <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>“csrftoken”<span class="token punctuation">)</span><span class="token punctuation">;</span> 
   <span class="token keyword">if</span><span class="token punctuation">(</span>sToken <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> xhrToken <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> sToken<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>xhrToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
       chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span> 
   <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sToken <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> pToken <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> sToken<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
       chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span> 
   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> 
       request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>“error<span class="token punctuation">.</span>jsp”<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> 
   <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),b={href:"https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/",target:"_blank",rel:"noopener noreferrer"},T=t(`<h4 id="分布式校验" tabindex="-1"><a class="header-anchor" href="#分布式校验"><span>分布式校验</span></a></h4><p>在大型网站中，使用Session存储CSRF Token会带来很大的压力。访问单台服务器session是同一个。但是现在的大型网站中，我们的服务器通常不止一台，可能是几十台甚至几百台之多，甚至多个机房都可能在不同的省份，用户发起的HTTP请求通常要经过像Ngnix之类的负载均衡器之后，再路由到具体的服务器上，由于Session默认存储在单机服务器内存中，因此在分布式环境下同一个用户发送的多次HTTP请求可能会先后落到不同的服务器上，导致后面发起的HTTP请求无法拿到之前的HTTP请求存储在服务器中的Session数据，从而使得Session机制在分布式环境下失效，因此在分布式集群中CSRF Token需要存储在Redis之类的公共存储空间。 由于使用Session存储，读取和验证CSRF Token会引起比较大的复杂度和性能问题，目前很多网站采用Encrypted Token Pattern方式。这种方法的Token是一个计算出来的结果，而非随机生成的字符串。这样在校验时无需再去读取存储的Token，只用再次计算一次即可。 这种Token的值通常是使用UserID、时间戳和随机数，通过加密的方法生成。这样既可以保证分布式服务的Token一致，又能保证Token不容易被破解。 在token解密成功之后，服务器可以访问解析值，Token中包含的UserID和时间戳将会被拿来被验证有效性，将UserID与当前登录的UserID进行比较，并将时间戳与当前时间进行比较。</p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h4><p>Token是一个比较有效的CSRF防护方法，只要页面没有XSS漏洞泄露Token，那么接口的CSRF攻击就无法成功。 但是此方法的实现比较复杂，需要给每一个页面都写入Token（前端无法使用纯静态页面），每一个Form及Ajax请求都携带这个Token，后端对每一个接口都进行校验，并保证页面Token及请求Token一致。这就使得这个防护策略不能在通用的拦截上统一拦截处理，而需要每一个页面和接口都添加对应的输出和校验。这种方法工作量巨大，且有可能遗漏。 <strong>验证码和密码其实也可以起到CSRF Token的作用哦，而且更安全。</strong><strong>为什么很多银行等网站会要求已经登录的用户在转账时再次输入密码，现在是不是有一定道理了？</strong></p><h3 id="双重cookie验证" tabindex="-1"><a class="header-anchor" href="#双重cookie验证"><span>双重Cookie验证</span></a></h3><p>在会话中存储CSRF Token比较繁琐，而且不能在通用的拦截上统一处理所有的接口。 那么另一种防御措施是使用双重提交Cookie。利用CSRF攻击不能获取到用户Cookie的特点，我们可以要求Ajax和表单请求携带一个Cookie中的值。 双重Cookie采用以下流程：</p><ul><li>在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串（例如csrfcookie=v8g9e4ksfhw）。</li><li>在前端向后端发起请求时，取出Cookie，并添加到URL的参数中（接上例POST https://www.a.com/comment?csrfcookie=v8g9e4ksfhw）。</li><li>后端接口验证Cookie中的字段与URL参数中的字段是否一致，不一致则拒绝。</li></ul><p>此方法相对于CSRF Token就简单了许多。可以直接通过前后端拦截的的方法自动化实现。后端校验也更加方便，只需进行请求中字段的对比，而不需要再进行查询和存储Token。 当然，此方法并没有大规模应用，其在大型网站上的安全性还是没有CSRF Token高，原因我们举例进行说明。 由于任何跨域都会导致前端无法获取Cookie中的字段（包括子域名之间），于是发生了如下情况：</p><ul><li>如果用户访问的网站为www.a.com，而后端的api域名为api.a.com。那么在www.a.com下，前端拿不到api.a.com的Cookie，也就无法完成双重Cookie认证。</li><li>于是这个认证Cookie必须被种在a.com下，这样每个子域都可以访问。</li><li>任何一个子域都可以修改a.com下的Cookie。</li><li>某个子域名存在漏洞被XSS攻击（例如upload.a.com）。虽然这个子域下并没有什么值得窃取的信息。但攻击者修改了a.com下的Cookie。</li><li>攻击者可以直接使用自己配置的Cookie，对XSS中招的用户再向www.a.com下，发起CSRF攻击。</li></ul><h4 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结：</span></a></h4><p><strong>用双重Cookie防御CSRF的优点：</strong></p><ul><li>无需使用Session，适用面更广，易于实施。</li><li>Token储存于客户端中，不会给服务器带来压力。</li><li>相对于Token，实施成本更低，可以在前后端统一拦截校验，而不需要一个个接口和页面添加。</li></ul><p><strong>缺点：</strong></p><ul><li>Cookie中增加了额外的字段。</li><li>如果有其他漏洞（例如XSS），攻击者可以注入Cookie，那么该防御方式失效。</li><li>难以做到子域名的隔离。</li><li>为了确保Cookie传输安全，采用这种防御方式的最好确保用整站HTTPS的方式，如果还没切HTTPS的使用这种方式也会有风险。</li></ul><h3 id="samesite-cookie属性" tabindex="-1"><a class="header-anchor" href="#samesite-cookie属性"><span>Samesite Cookie属性</span></a></h3><p>防止CSRF攻击的办法已经有上面的预防措施。为了从源头上解决这个问题，Google起草了一份草案来改进HTTP协议，那就是为Set-Cookie响应头新增Samesite属性，它用来标明这个 Cookie是个“同站 Cookie”，同站Cookie只能作为第一方Cookie，不能作为第三方Cookie，Samesite 有两个属性值，分别是 Strict 和 Lax，下面分别讲解：</p><h4 id="samesite-strict" tabindex="-1"><a class="header-anchor" href="#samesite-strict"><span>Samesite=Strict</span></a></h4><p>这种称为严格模式，表明这个 Cookie 在任何情况下都不可能作为第三方 Cookie，绝无例外。比如说 b.com 设置了如下 Cookie：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>Set-Cookie: foo=1; Samesite=Strict
Set-Cookie: bar=2; Samesite=Lax
Set-Cookie: baz=3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在 a.com 下发起对 b.com 的任意请求，foo 这个 Cookie 都不会被包含在 Cookie 请求头中，但 bar 会。举个实际的例子就是，假如淘宝网站用来识别用户登录与否的 Cookie 被设置成了 Samesite=Strict，那么用户从百度搜索页面甚至天猫页面的链接点击进入淘宝后，淘宝都不会是登录状态，因为淘宝的服务器不会接受到那个 Cookie，其它网站发起的对淘宝的任意请求都不会带上那个 Cookie。</p><h4 id="samesite-lax" tabindex="-1"><a class="header-anchor" href="#samesite-lax"><span>Samesite=Lax</span></a></h4><p>这种称为宽松模式，比 Strict 放宽了点限制：假如这个请求是这种请求（改变了当前页面或者打开了新页面）且同时是个GET请求，则这个Cookie可以作为第三方Cookie。比如说 b.com设置了如下Cookie：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>Set-Cookie: foo=1; Samesite=Strict
Set-Cookie: bar=2; Samesite=Lax
Set-Cookie: baz=3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当用户从 a.com 点击链接进入 b.com 时，foo 这个 Cookie 不会被包含在 Cookie 请求头中，但 bar 和 baz 会，也就是说用户在不同网站之间通过链接跳转是不受影响了。但假如这个请求是从 a.com 发起的对 b.com 的异步请求，或者页面跳转是通过表单的 post 提交触发的，则bar也不会发送。 生成Token放到Cookie中并且设置Cookie的Samesite，Java代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addTokenCookieAndHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> httpRequest<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> httpResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//生成token</span>
        <span class="token class-name">String</span> sToken <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//手动添加Cookie实现支持“Samesite=strict”</span>
        <span class="token comment">//Cookie添加双重验证</span>
        <span class="token class-name">String</span> <span class="token class-name">CookieSpec</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s=%s; Path=%s; HttpOnly; Samesite=Strict&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">determineCookieName</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">)</span><span class="token punctuation">,</span> sToken<span class="token punctuation">,</span> httpRequest<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpResponse<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Set-Cookie&quot;</span><span class="token punctuation">,</span> <span class="token class-name">CookieSpec</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token constant">CSRF_TOKEN_NAME</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),R={href:"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#Implementation_example",target:"_blank",rel:"noopener noreferrer"},x=n("strong",null,"OWASP Cross-Site_Request_Forgery #Implementation example",-1),q=t('<h4 id="我们应该如何使用samesitecookie" tabindex="-1"><a class="header-anchor" href="#我们应该如何使用samesitecookie"><span>我们应该如何使用SamesiteCookie</span></a></h4><p>如果SamesiteCookie被设置为Strict，浏览器在任何跨域请求中都不会携带Cookie，新标签重新打开也不携带，所以说CSRF攻击基本没有机会。 <strong>但是跳转子域名或者是新标签重新打开刚登陆的网站，之前的Cookie都不会存在。尤其是有登录的网站，那么我们新打开一个标签进入，或者跳转到子域名的网站，都需要重新登录。对于用户来讲，可能体验不会很好。</strong> 如果SamesiteCookie被设置为Lax，那么其他网站通过页面跳转过来的时候可以使用Cookie，可以保障外域连接打开页面时用户的登录状态。但相应的，其安全性也比较低。 另外一个问题是Samesite的兼容性不是很好，现阶段除了从新版Chrome和Firefox支持以外，Safari以及iOS Safari都还不支持，现阶段看来暂时还不能普及。 而且，SamesiteCookie目前有一个致命的缺陷：不支持子域。例如，种在topic.a.com下的Cookie，并不能使用a.com下种植的SamesiteCookie。这就导致了当我们网站有多个子域名时，不能使用SamesiteCookie在主域名存储用户登录信息。每个子域名都需要用户重新登录一次。 总之，SamesiteCookie是一个可能替代同源验证的方案，但目前还并不成熟，其应用场景有待观望。</p><h2 id="防止网站被利用" tabindex="-1"><a class="header-anchor" href="#防止网站被利用"><span>防止网站被利用</span></a></h2><p>前面所说的，都是被攻击的网站如何做好防护。而非防止攻击的发生，CSRF的攻击可以来自：</p><ul><li>攻击者自己的网站。</li><li>有文件上传漏洞的网站。</li><li>第三方论坛等用户内容。</li><li>被攻击网站自己的评论功能等。</li></ul><p>对于来自黑客自己的网站，我们无法防护。但对其他情况，那么如何防止自己的网站被利用成为攻击的源头呢？</p><ul><li>严格管理所有的上传接口，防止任何预期之外的上传内容（例如HTML）。</li><li>添加Header X-Content-Type-Options: nosniff 防止黑客上传HTML内容的资源（例如图片）被解析为网页。</li><li>对于用户上传的图片，进行转存或者校验。不要直接使用用户填写的图片链接。</li><li>当前用户打开其他用户填写的链接时，需告知风险（这也是很多论坛不允许直接在内容中发布外域链接的原因之一，不仅仅是为了用户留存，也有安全考虑）。</li></ul>',7);function F(w,_){const s=p("ExternalLinkIcon");return i(),l("div",null,[r,n("blockquote",null,[n("p",null,[a("跨站请求伪造（CSRF）是一种冒充受信任用户，向服务器发送非预期请求的攻击方式。攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。 当恶意网站、电子邮件、博客、即时消息或程序诱骗经过身份验证的用户的 Web 浏览器在受信任的站点上执行不需要的操作时，就会发生"),n("a",u,[a("跨站点请求伪造 （CSRF）"),e(s)]),a(" 攻击。如果目标用户已通过站点身份验证，则未受保护的目标站点无法区分合法的授权请求和伪造的经过身份验证的请求。 由于浏览器请求会自动包含所有 cookie，包括会话 cookie，因此除非使用适当的授权，否则此攻击会起作用，这意味着目标站点的质询-响应机制不会验证请求者的身份和权限。实际上，CSRF 攻击使目标系统在受害者不知情的情况下通过受害者的浏览器执行攻击者指定的功能（通常直到提交未经授权的操作之后）。 但是，成功的 CSRF 攻击只能利用易受攻击的应用程序暴露的功能和用户的权限。根据用户的凭据，攻击者可以转移资金、更改密码、进行未经授权的购买、提升目标帐户的权限或执行允许用户执行的任何操作。")])]),k,n("ul",null,[n("li",null,[d,a(" IE 11 不会在跨站CORS请求上添加Origin标头，Referer头将仍然是唯一的标识。最根本原因是因为IE 11对同源的定义和其他浏览器有不同，有两个主要的区别，可以参考"),n("a",m,[a("MDN Same-origin_policy#IE_Exceptions"),e(s)])]),h]),v,n("p",null,[a("CSRF Token的防护策略分为三个步骤： "),g,a(" 首先，用户打开页面的时候，服务器需要给这个用户生成一个Token，该Token通过加密算法对数据进行加密，一般Token都包括随机字符串和时间戳的组合，显然在提交时Token不能再放在Cookie中了，否则又会被攻击者冒用。因此，为了安全起见Token最好还是存在服务器的Session中，之后在每次页面加载时，使用JS遍历整个DOM树，对于DOM中所有的a和form标签后加入Token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的HTML代码，这种方法就没有作用，还需要程序员在编码时手动添加Token。 "),f,a(" 对于GET请求，Token将附在请求地址之后，这样URL 就变成 "),n("a",S,[a("http://url?csrftoken=tokenvalue。"),e(s)]),a(" 而对于 POST 请求来说，要在 form 的最后加上：")]),C,n("p",null,[a("代码源自"),n("a",b,[a("IBM developerworks CSRF"),e(s)]),a(" 这个Token的值必须是随机生成的，这样它就不会被攻击者猜到，考虑利用Java应用程序的java.security.SecureRandom类来生成足够长的随机标记，替代生成算法包括使用256位BASE64编码哈希，选择这种生成算法的开发人员必须确保在散列数据中使用随机性和唯一性来生成随机标识。通常，开发人员只需为当前会话生成一次Token。在初始生成此Token之后，该值将存储在会话中，并用于每个后续请求，直到会话过期。当最终用户发出请求时，服务器端必须验证请求中Token的存在性和有效性，与会话中找到的Token相比较。如果在请求中找不到Token，或者提供的值与会话中的值不匹配，则应中止请求，应重置Token并将事件记录为正在进行的潜在CSRF攻击。")]),T,n("p",null,[a("代码源自"),n("a",R,[x,e(s)])]),q])}const y=o(c,[["render",F],["__file","CSRF.html.vue"]]),P=JSON.parse('{"path":"/interview/CSRF.html","title":"CSRF，如何防御CSRF攻击","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一个典型的CSRF攻击有着如下的流程","slug":"一个典型的csrf攻击有着如下的流程","link":"#一个典型的csrf攻击有着如下的流程","children":[]},{"level":2,"title":"几种常见的攻击类型","slug":"几种常见的攻击类型","link":"#几种常见的攻击类型","children":[]},{"level":2,"title":"如何进行防御","slug":"如何进行防御","link":"#如何进行防御","children":[{"level":3,"title":"同源检测","slug":"同源检测","link":"#同源检测","children":[]},{"level":3,"title":"CSRF Token","slug":"csrf-token","link":"#csrf-token","children":[]},{"level":3,"title":"双重Cookie验证","slug":"双重cookie验证","link":"#双重cookie验证","children":[]},{"level":3,"title":"Samesite Cookie属性","slug":"samesite-cookie属性","link":"#samesite-cookie属性","children":[]}]},{"level":2,"title":"防止网站被利用","slug":"防止网站被利用","link":"#防止网站被利用","children":[]}],"filePathRelative":"interview/CSRF.md","git":{"createdTime":1715780535000,"updatedTime":1715780535000,"contributors":[{"name":"xiaoyu","email":"luoyu2003@outlook.com","commits":1}]},"readingTime":{"minutes":21.77,"words":6530}}');export{y as comp,P as data};
