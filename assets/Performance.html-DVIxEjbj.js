import{_ as e,r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-Bn7XLESk.js";const i={},u=n("h1",{id:"performance",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#performance"},[n("span",null,"Performance")])],-1),r=n("blockquote",null,[n("p",null,[n("strong",null,"什么是前端性能优化？")]),n("p",null,[n("code",null,"前端性能"),s("是指⻚⾯信息加⼯（⽐如数据展现、动画、操作效率等）的效率。")]),n("p",null,[n("code",null,"优化"),s("是指借助相关技术⼿段提⾼这样的效率。")])],-1),k=n("strong",null,"文章参考",-1),d=n("br",null,null,-1),v={href:"https://zhuanlan.zhihu.com/p/105561186",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),g={href:"https://zhuanlan.zhihu.com/p/495649475",target:"_blank",rel:"noopener noreferrer"},b=p('<h2 id="为什么前端性能如此重要" tabindex="-1"><a class="header-anchor" href="#为什么前端性能如此重要"><span>为什么前端性能如此重要?</span></a></h2><p>我们知道，现在就是⼀个“流量为王”的时代，⼀个⽹站最重要的的就是⽤⼾，有了⽤⼾你才能有 业务，打⽐⽅，你是⼀个电商⽹站，那么你肯定希望你的⽤⼾越多越好，这样才会有更多的⼈去浏 览你的商品，从⽽在你的⽹站上花钱，买东西，这样你才能产⽣收益，但假如你的⽹站打开要⼗⼏ 秒，请求接⼝要⼗⼏秒，那⽤⼾还愿意等么？</p><p>看⼀下以下的⽤⼾体验图： <img src="https://img2.imgtp.com/2024/05/17/W0SHqC1V.jpg" alt=""></p><p>国外⼀些著名公司的调研：</p><ul><li>BBC ⻚⾯<strong>加载时⻓每增加 1 秒，⽤⼾流失 10%</strong></li><li>Pinterest<strong>减少⻚⾯加载时⻓ 40%,提⾼了搜索和注册数 15%</strong></li><li>DoubleClick 发现如果<strong>移动⽹站加载时⻓超过 3 秒，53%的⽤⼾会放弃</strong></li></ul><p>所以说，做好性能优化，提⾼⽤⼾体验很重要！</p><h2 id="网⻚性能指标及影响因素" tabindex="-1"><a class="header-anchor" href="#网⻚性能指标及影响因素"><span>⽹⻚性能指标及影响因素</span></a></h2><h3 id="timing" tabindex="-1"><a class="header-anchor" href="#timing"><span>Timing</span></a></h3><p>⻚⾯运⾏的时间线（统计了从浏览器从⽹址开始导航到 <code>window.onload</code> 事件触发的⼀系列关键的时间点）： <img src="https://img2.imgtp.com/2024/05/18/eiAwfrNM.jpg" alt="时间线"></p><h3 id="关于-performance-api" tabindex="-1"><a class="header-anchor" href="#关于-performance-api"><span>关于 Performance API</span></a></h3>',10),f=n("code",null,"Performance API",-1),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Performance",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,[n("strong",null,"常⽤ Performance API："),n("br")],-1),q={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceTiming",target:"_blank",rel:"noopener noreferrer"},w=n("strong",null,"废弃",-1),j=n("img",{src:"https://img2.imgtp.com/2024/05/18/KA0L3QiR.jpg",alt:"Timing"},null,-1),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Performance/getEntries",target:"_blank",rel:"noopener noreferrer"},P={href:"https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType",target:"_blank",rel:"noopener noreferrer"},_=n("strong",null,"navigation(⻚⾯导航)、resource(资源加载)、paint（绘制指标） 等",-1),C=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// ⻚⾯导航时间</span>
performance<span class="token punctuation">.</span><span class="token function">getEntriesByType</span><span class="token punctuation">(</span><span class="token string">&quot;navigation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 静态资源</span>
performance<span class="token punctuation">.</span><span class="token function">getEntriesByType</span><span class="token punctuation">(</span><span class="token string">&quot;resource&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 绘制指标</span>
performance<span class="token punctuation">.</span><span class="token function">getEntriesByType</span><span class="token punctuation">(</span><span class="token string">&quot;paint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*需要定时轮询， 才能持续获取性能指标*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),T={href:"https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByName",target:"_blank",rel:"noopener noreferrer"},E=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>performance<span class="token punctuation">.</span><span class="token function">getEntriesByName</span><span class="token punctuation">(</span>
  <span class="token string">&quot;https://i0.hdslb.com/bfs/svgnext/BDC/danmu_square_line/v1.json&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

performance<span class="token punctuation">.</span><span class="token function">getEntriesByName</span><span class="token punctuation">(</span>
  <span class="token string">&quot;https://cloud.tencent.com/developer/api/user/session&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*需要定时轮询， 才能持续获取性能指标*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),S={href:"https://developer.mozilla.org/en-US/docs/Web/API/Performance/now",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"performance.timing.navigationStart",-1),I=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 5483324.099999994</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M={href:"https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"（观察者模式）推荐，主要⽤于监测性能度量事件",-1),R=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* 写法⼀ */</span>
<span class="token comment">//直接往 PerformanceObserver() ⼊参匿名回调函数，成功 new 了⼀个PerformanceObserver 类的，名为 observer 的对象</span>
<span class="token keyword">var</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> entries <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> entries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//处理“navigation”和“resource”事件</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//调⽤ observer 对象的 observe() ⽅法</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">entryTypes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;navigation&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;resource&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 写法⼆ */</span>
<span class="token comment">//预先声明回调函数 perf_observer</span>
<span class="token keyword">function</span> <span class="token function">perf_observer</span><span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//处理“navigation”事件</span>
<span class="token punctuation">}</span>
<span class="token comment">//再将其传⼊ PerformanceObserver()，成功 new 了⼀个 PerformanceObserver 类的，名为observer2 的对象</span>
<span class="token keyword">var</span> observer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span>perf_observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//调⽤ observer2 对象的 observe() ⽅法</span>
observer2<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">entryTypes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;navigation&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例化 PerformanceObserver 对象，observe ⽅法的 entryTypes 主要性能类型有哪些？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>PerformanceObserver<span class="token punctuation">.</span>supportedEntryTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
[&#39;element&#39;, &#39;event&#39;, &#39;first-input&#39;, &#39;largest-contentful-paint&#39;, &#39;layoutshift&#39;,
&#39;longtask&#39;, &#39;mark&#39;, &#39;measure&#39;, &#39;navigation&#39;, &#39;paint&#39;, &#39;resource&#39;,
&#39;visibility-state&#39;]
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体每个性能类型的含义：</p><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">element</td><td style="text-align:left;">元素加载时间，实例项是 PerformanceElementTiming 对象。</td></tr><tr><td style="text-align:center;">event</td><td style="text-align:left;">事件延迟，实例项是 PerformanceEventTiming 对象。</td></tr><tr><td style="text-align:center;">first-input</td><td style="text-align:left;">⽤⼾第⼀次与⽹站交互（即点击链接、点击按钮或使⽤⾃定义的 JavaScript 控件时）到浏览器实际能够响应该交互的时间，称之为 Firstinputdelay‒FID。</td></tr><tr><td style="text-align:center;">largest-contentful-paint</td><td style="text-align:left;">屏幕上触发的最⼤绘制元素，实例项是 LargestContentfulPaint 对象。</td></tr><tr><td style="text-align:center;">layout-shift</td><td style="text-align:left;">元素移动时候的布局稳定性，实例项是 LayoutShift 对象。</td></tr><tr><td style="text-align:center;">long-animation-frame</td><td style="text-align:left;">⻓动画关键帧。</td></tr><tr><td style="text-align:center;">longtask</td><td style="text-align:left;">⻓任务实例，归属于 PerformanceLongTaskTiming 对象。</td></tr><tr><td style="text-align:center;">mark</td><td style="text-align:left;">⽤⼾⾃定义的性能标记。实例项是 PerformanceMark 对象。</td></tr><tr><td style="text-align:center;">measure</td><td style="text-align:left;">⽤⼾⾃定义的性能测量。实例项是 PerformanceMeasure 对象。</td></tr><tr><td style="text-align:center;">navigation</td><td style="text-align:left;">⻚⾯导航出去的时间，实例项是 PerformancePaintTiming 对象。</td></tr><tr><td style="text-align:center;">pain</td><td style="text-align:left;">⻚⾯加载时内容渲染的关键时刻（第⼀次绘制，第⼀次有内容的绘制，实例项是 PerformancePaintTiming 对象。</td></tr><tr><td style="text-align:center;">resource</td><td style="text-align:left;">⻚⾯中资源的加载时间信息，实例项是 PerformanceResourceTiming 对象。</td></tr><tr><td style="text-align:center;">visibility-state</td><td style="text-align:left;">⻚⾯可⻅性状态更改的时间，即选项卡何时从前台更改为后台，反之亦然。实例项是 VisibilityStateEntry 对象。</td></tr><tr><td style="text-align:center;">soft-navigation</td><td style="text-align:left;">-</td></tr></tbody></table><h3 id="用户为导向性能指标介绍" tabindex="-1"><a class="header-anchor" href="#用户为导向性能指标介绍"><span>用户为导向性能指标介绍</span></a></h3><p><img src="https://img2.imgtp.com/2024/05/18/IcjR69Hl.png" alt="piant"></p><p><strong>⾸次绘制（First Paint）和⾸次内容绘制（First Contentful Paint）</strong></p><blockquote><p>⾸次绘制（FP）和⾸次内容绘制（FCP）。在浏览器导航并渲染出像素点后，这些性能指标点⽴即被标记。 这些点对于⽤⼾⽽⾔⼗分重要，直乎感官体验！<br> ⾸次绘制（FP），⾸次渲染的时间点。FP 和 FCP 有点像，但 FP ⼀定先于 FCP 发⽣，例如⼀个⻚⾯加载时，第⼀个 DOM 还没绘制完成，但是可能这时⻚⾯的背景颜⾊已经出来了，这时 FP 指标就被记录下来了。⽽ FCP 会在⻚⾯绘制完第⼀个 DOM 内容后记录。<br> ⾸次内容绘制（FCP）,⾸次内容绘制的时间，指⻚⾯从开始加载到⻚⾯内容的任何部分在屏幕上完成渲染的时间。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* PerformanceObserver监控 */</span>
<span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> entries <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&quot;first-paint&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;FP（⾸次绘制）:&quot;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&quot;first-contentful-paint&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;FCP（⾸次内容绘制）:&quot;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">entryTypes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;paint&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* performance.getEntriesByName*/</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token string">&quot;FP（⾸次绘制）：&quot;</span> <span class="token operator">+</span> performance<span class="token punctuation">.</span><span class="token function">getEntriesByName</span><span class="token punctuation">(</span><span class="token string">&quot;first-paint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startTime
<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token string">&quot;FCP（⾸次内容绘制）：&quot;</span> <span class="token operator">+</span>
    performance<span class="token punctuation">.</span><span class="token function">getEntriesByName</span><span class="token punctuation">(</span><span class="token string">&quot;first-contentful-paint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startTime
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>⾸次有效绘制（First Meaningful Paint）</strong></p><blockquote><p>有效内容，这种⼀般很难清晰地界定哪些元素的加载是「有⽤」的（因此⽬前尚⽆规范），但对于开发者他们⾃⼰⽽⾔，他们更知道⻚⾯的哪些部分对于⽤⼾⽽⾔是最为有⽤的，所以这样的衡量标准更多的时候是掌握在开发者⼿上！</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> entries <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&quot;https://xxxxxx.xxx.jpg&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">entryTypes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;resource&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以是图⽚、某个Dom元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可交互时间（<code>TTI</code>）</strong></p><blockquote><p>指标测量⻚⾯从开始加载(FCP)到主要⼦资源完成渲染，并能够快速、可靠地响应⽤⼾输⼊所需的时间。阻塞会影响正常可交互的时间，浏览器<code>主线程⼀次只能处理⼀个任务</code>，如果主线程⻓时间被占⽤，那么可交互时间也会变⻓，所以更多的 TTI 都是发⽣在主线程处于空闲的时间点<br> 良好的<code>TTI</code>应该控制在 5 秒以内。<br> 测量 <code>TTI</code> 的最佳⽅法是在⽹站上运⾏ Lighthouse 性能审核<br></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>performance<span class="token punctuation">.</span>timing<span class="token punctuation">.</span>domInteractive<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可交互时间点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>⻓任务（Long Task）</strong></p><blockquote><p>浏览器主线程⼀次只能处理⼀个任务。 某些情况下，⼀些任务将可能会花费很⻓的时间来执⾏，持续占⽤主进程资源，如果这种情况发⽣了，主线程阻塞，剩下的任务只能在队列中等待。<br> ⽤⼾所感知到的可能是输⼊的延迟，或者是哐当⼀下全部出现。这些是当今⽹⻚糟糕体验的主要来源之⼀。<br> Long Tasks API 认为任何超过 50 毫秒的任务（Task）都可能存在潜在的问题，并将这些任务相关信息回调给给前端。<br> 把 long task 时间定义为 50ms 的主要理论依据是 Chrome 提出的 RAIL 模型，RAIL 认为事件响应应该在 100ms 以内，滚动和动画处理应该在 16ms 以内，才能保证好的⽤⼾体验，⽽如果⼀个 task 执⾏超过 50ms，则很有可能让体验达不到 RAIL 的标准，故我们需要重点关注执⾏时间超过 50ms 的任务。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> entries <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Long Task（⻓任务）:&quot;</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">entryTypes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;longtask&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="核心网页指标" tabindex="-1"><a class="header-anchor" href="#核心网页指标"><span>核心网页指标</span></a></h3><p><img src="https://img2.imgtp.com/2024/05/18/x2xuZyeN.png" alt="target"></p><ul><li><code>Largest Contentful Paint (LCP)</code>：最⼤内容绘制， ⽤于衡量加载性能。 为了提供良好的⽤⼾体 验，LCP 应在⽹⻚⾸次开始加载后的 2.5 秒内发⽣。</li><li><code>First Input Delay (FID)</code>：⾸次输⼊延迟，⽤于衡量可交互性。为了提供良好的⽤⼾体验，⻚⾯的 FID 应不超过 100 毫秒。</li><li><code>Cumulative Layout Shift (CLS)</code>：累积布局偏移，⽤于衡量视觉稳定性。为了提供良好的⽤⼾体 验，⻚⾯应保持 0.1 或更低的 CLS</li></ul><p><strong>Lighthouse-知名测评⼯具</strong><img src="https://img2.imgtp.com/2024/05/18/ZblXmuQe.png" alt="LightHouse"></p><h3 id="常⻅优化手段" tabindex="-1"><a class="header-anchor" href="#常⻅优化手段"><span>常⻅优化⼿段</span></a></h3><h4 id="异步加载" tabindex="-1"><a class="header-anchor" href="#异步加载"><span>异步加载</span></a></h4><p>说起<code>异步加载</code>，我们需要先了解⼀下什么是同步加载？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 默认就是同步加载</span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;http://abc.com/script.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>同步加载: 同步模式⼜称<code>阻塞模式</code>，会阻⽌浏览器的后续处理，停⽌了后续的⽂件的解析，执⾏， 如图像的渲染。流览器之所以会采⽤同步模式，是因为加载的 js ⽂件中有对 dom 的操作，重定向， 输出 document 等默认⾏为，所以同步才是最安全的。所以⼀般我们都会把 script 标签放置在 body 结束标签之前，减少阻塞。</li><li>所以异步加载，其实就是⼀种⾮阻塞加载模式的⽅式，就是浏览器在下载执⾏ js 的同时，还会继续 进⾏后续⻚⾯的处理。</li></ul><p>⼏种常⻅的异步加载脚本⽅式:</p><p><em>async 和 defer</em><br> 在 JavaScript 脚本增加 async 或者 defer 属性</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>// ⾯试经常问: script标签的defer和async的区别？ //
defer要等到html解析完成之后执⾏脚本
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defer</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
// async异步加载脚本后便会执⾏脚本
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">async</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>动态添加 script 标签</em></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// js代码中动态添加script标签，并将其插⼊⻚⾯</span>
<span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&quot;a.js&quot;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>通过 XHR 异步加载 js</em></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// ⾯试经常问： 谈谈JS中的 XMLHttpRequest 对象的理解？</span>
<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
第⼀个参数是请求类型
第⼆个参数是请求的URL
第三个参数是是否为异步请求
*/</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/getUser&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true代表我们需要异步加载该脚本</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;testHeader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ⾃定义Header</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 参数为请求主体发送的数据，为必填项，当不需要发送数据时，使⽤null</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadyStateChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readystate <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ⾯试经常问： 说出你知道的哪些HTTP状态码？</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span> <span class="token operator">||</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;成功, result: &quot;</span><span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;错误, errCode:&quot;</span><span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="按需打包与按需加载" tabindex="-1"><a class="header-anchor" href="#按需打包与按需加载"><span>按需打包与按需加载</span></a></h4><p>随着 Webpack 等构建⼯具的能⼒越来越强，开发者在构建阶段可以随⼼所欲地打造项⽬流程，与此同 时按需加载和按需打包的技术曝光度也越来越⾼，甚⾄决定着⼯程化构建的结果，直接影响应⽤的性 能优化。</p><p>两者的概念：</p><ul><li>按需打包表⽰的是针对第三⽅依赖库及业务模块。只打包真正在运⾏时可能会⽤到的代码。</li><li>按需加载表⽰的是代码模块在交互的时候需要动态导⼊。</li></ul><p><strong>按需打包</strong><br> 按需打包⼀般通过两种⽅法来实现：</p><ol><li>使⽤ ES Module ⽀持的 Tree Shaking ⽅案，使⽤构建⼯具时候完成按需打包。 我们看⼀下这种场景：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;antd&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 假设我们的业务使⽤了Button组件，同时该组件库没有提供ES Module版本，</span>
<span class="token comment">// 那么这样的引⽤会导致最终打包的代码是所有antd导出的内容，这样会⼤⼤增加代码的体积</span>

<span class="token comment">// 但是如果我们组件库提供了ES Module版本（静态分析能⼒），并且开启了Tree Shaking功能，</span>
<span class="token comment">// 那么我们就可以通过“摇树”特性</span>
<span class="token comment">// 将不会被使⽤的代码在构建阶段移除。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正确使⽤ Tree Shaking 的姿势：<br> antd 组件库</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token string-property property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lib/index.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 暴露CommonJS规范代码lib/index.js</span>
    <span class="token string-property property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es/index.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// ⾮package.json标准字段，打包⼯具专⽤字段，指定符合ESM规范的⼊⼝⽂件</span>
    <span class="token comment">// 副作⽤配置字段，告诉打包⼯具遇到sideEffects匹配到的资源，均为⽆副作⽤的模块呢？</span>
    <span class="token string-property property">&quot;sideEffects&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;*.css&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot; expample.js&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 啥叫作副作⽤模块</span>
<span class="token comment">// expample.js</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项⽬：<br> Tree Shaking ⼀般与 Babel 搭配使⽤，需要在项⽬⾥⾯配置 Babel，因为 Babel 默认会把 ESM 规范打包 成 CommonJs 代码，所以需要通过配置 babel-preset-env#moudles 编译降级</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>production： <span class="token punctuation">{</span>
    <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>webpack4.0 以上在 mode 为 production 的时候会⾃动开启 Tree Shaking，实际就是依赖了、UglifyJS 等压缩插件，默认配置</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 三类标记：</span>
        <span class="token comment">// used export： 被使⽤过的export会这样标记</span>
        <span class="token comment">// unused ha by rmony export： 没有被使⽤过的export被这样标记</span>
        <span class="token comment">// harmony import： 所有import会被这样标记</span>
        <span class="token literal-property property">usedExports</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 使⽤usedExports进⾏标记</span>
        <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// ⽀持删除未引⽤代码的压缩器</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使⽤以 babel-plugin-import 为主的 Babel 插件完成按需打包。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">libraryName</span><span class="token operator">:</span> <span class="token string">&quot;antd&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">libraryDirectory</span><span class="token operator">:</span> <span class="token string">&quot;lib&quot;</span><span class="token punctuation">,</span> <span class="token comment">// default: lib</span>
    <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">libraryName</span><span class="token operator">:</span> <span class="token string">&quot;antd&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> TimePicker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;antd&quot;</span>
↓ ↓ ↓ ↓ ↓ ↓
<span class="token keyword">var</span> _button <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;antd/lib/time-picker&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>按需加载</strong><br> 如何才能动态地按需导⼊模块呢？<br> 动态导⼊ <code>import(module)</code> ⽅法加载模块并返回⼀个 promise，该 promise resolve 为⼀个包含其所有导出的模块对象。我们可以在代码中的任意位置调⽤这个表达式。不兼容浏览器，可以⽤ Babel 进⾏转换（<code>@babel/plugin-syntax-dynamic-import </code>）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// say.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你好</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">bye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">拜拜</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;默认到处&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
<span class="token function-variable function">hi</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token function-variable function">bye</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token keyword">default</span><span class="token operator">:</span><span class="token string">&quot;sdsd&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> say <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./say.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    say<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 你好</span>
    say<span class="token punctuation">.</span><span class="token function">bye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拜拜</span>
    say<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认导出</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果让你⼿写⼀个不考虑兼容性的 import(module)⽅法，你会怎么写？可以看下以下 Function-like</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 利⽤ES6模块化来实现</span>
<span class="token keyword">const</span> <span class="token function-variable function">dynamicImport</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建script标签</span>
        <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> tempGlobal <span class="token operator">=</span> <span class="token string">&quot;__tempModuleVariable&quot;</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通过设置 type=&quot;module&quot;，告诉浏览器该脚本是⼀个 ES6 模块，需要按照</span>
        模块规范进⾏导⼊和导出
        script<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">;</span>
        script<span class="token punctuation">.</span>crossorigin<span class="token operator">=</span><span class="token string">&quot;anonymous&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 跨域</span>
        script<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">import * as m from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;;window.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tempGlobal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = m;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        <span class="token comment">// load 回调</span>
        script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span>tempGlobal<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">delete</span> window<span class="token punctuation">[</span>tempGlobal<span class="token punctuation">]</span><span class="token punctuation">;</span>
            script<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// error回调</span>
        script<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Fail to load module script with URL:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">delete</span> window<span class="token punctuation">[</span>tempGlobal<span class="token punctuation">]</span><span class="token punctuation">;</span>
            script<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue性能优化常见策略" tabindex="-1"><a class="header-anchor" href="#vue性能优化常见策略"><span>Vue性能优化常见策略</span></a></h3><blockquote><p>可以从代码分割、服务端渲染、组件缓存、⻓列表优化等⻆度去分析Vue性能优化常⻅的策略。</p></blockquote><ul><li>最常⻅的路由懒加载：有效拆分App体积⼤⼩，访问时异步加载</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// 借助import()实现异步组件</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/foo&#39;</span><span class="token punctuation">,</span> <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./Foo.vue&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>keep-alive</code> 缓存⻚⾯：避免重复创建组件实例，且能保留缓存组件状态</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>component <span class="token operator">:</span>is<span class="token operator">=</span><span class="token string">&quot;Component&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使⽤ <code>v-show</code> 复⽤DOM：避免重复创建组件</li></ul><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cell<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 这种情况⽤v-show复⽤DOM，⽐v-if效果好 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>on<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Count</span> <span class="token attr-name">:num</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> display:none
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>!value<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>off<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Count</span> <span class="token attr-name">:num</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不再变化的数据使⽤ <code>v-once</code></li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- single element --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>This will never change: {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- the element have children --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>comment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- component --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">v-once</span> <span class="token attr-name">:comment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- \`v-for\` directive --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>i in list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>{{i}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>⻓列表性能优化：如果是⼤数据⻓列表，可采⽤虚拟滚动，只渲染少部分区域的内容，第三库<code>vuevirtual-scroller</code>、<code>vue-virtual-scroll-grid</code></p></li><li><p>图片懒加载</p></li></ul><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- vue-lazyload --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-lazy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/static/img/1.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第三⽅插件按需引⼊</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Button<span class="token punctuation">,</span> Select <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;element-plus&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Select<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>服务端渲染/静态⽹站⽣成：SSR/SSG</li><li>……</li></ul><h3 id="react性能优化常⻅策略" tabindex="-1"><a class="header-anchor" href="#react性能优化常⻅策略"><span>React性能优化常⻅策略</span></a></h3><p><img src="https://img2.imgtp.com/2024/05/18/h85K8Ebp.png" alt="React性能优化"></p><p>####【render过程】避免不必要的Render</p><ul><li><code>类组件跳过没有必要的组件更新</code>, 对应的技巧⼿段：PureComponent、React.memo、 shouldComponentUpdate。</li></ul><blockquote><p>PureComponent 是对类组件的 Props 和 State 进⾏浅⽐较 <br> React.memo是对函数组件的 Props 进⾏浅⽐较 <br> shouldComponentUpdate是React类组件的钩⼦，在该钩⼦函数我们可以对前后props进⾏深⽐对，返回false可以禁⽌更新组件，我们可以⼿动控制组件的更新 <br></p></blockquote><ul><li><strong>Hook的useMemo、useCallback 获得稳定的 Props 值</strong></li></ul><blockquote><p>传给⼦组件的派⽣状态或函数，每次都是新的引⽤，这样会导致⼦组件重新刷新</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useCallback， useState<span class="token punctuation">,</span> useMemo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 保证函数引⽤是⼀样的，在将该函数作为props往下传递给其他组件的时候，不会导致</span>
<span class="token comment">// 其他组件像PureComponent、shouldComponentUpdate、React.memo等相关优化失效</span>
<span class="token comment">// const oldFunc = () =&gt; setCount(count =&gt; count + 1)</span>
<span class="token keyword">const</span> newFunc <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">count</span> <span class="token operator">=&gt;</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// useMemo与useCallback ⼏乎是99%相似，只是useMemo⼀般⽤于密集型计算⼤的⼀些缓存，</span>
<span class="token comment">// 它得到的是函数执⾏的结果</span>
<span class="token keyword">const</span> calcValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token comment">/*耗时计算*/</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>state状态下沉，减⼩影响范围</strong></li></ul><blockquote><p>如果⼀个P组件，它有4个⼦组件ABCD，本⾝有个状态state p， 该状态只影响到AB ，那么我们可以把AB组件进⾏封装， state p 维护⾥⾯，那么state p变化了，也不会影响到CD组件的渲染</p></blockquote><ul><li><strong>⽤redux、React上下⽂ContextAPI 跳过中间组件Render</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createContext<span class="token punctuation">,</span> useState<span class="token punctuation">,</span> useContext<span class="token punctuation">,</span> useMemo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Context <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">val</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">MyProvider</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>val<span class="token punctuation">,</span> setVal<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">setVal</span><span class="token punctuation">(</span>val <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">val</span><span class="token operator">:</span> val
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>Context<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token operator">&gt;</span>
            <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>context change<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Context<span class="token punctuation">.</span>Provider<span class="token operator">&gt;</span>
   <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">useVal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">useContext</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">Child1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> val <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Child1重新渲染&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Child1<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">Child2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Child2只渲染⼀次&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Child2<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>MyProvider<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Child1 <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Child2 <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>MyProvider<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>避免使⽤内联函数</strong></li><li><strong>使⽤ Immutable，减少渲染的次数</strong></li><li><strong>列表项使⽤ key 属性，React 官⽅推荐将每项数据的 ID 作为组件的 key</strong></li></ul><p>那我如果使⽤索引值index作为key，为啥不推荐？⾯试题</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>// ⽆⽤更新
<span class="token comment">&lt;!-- 更新前 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Sam<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Ben<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Pam<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 删除后更新 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Sam<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Ben<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Pam<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>

// 输⼊错乱
<span class="token comment">&lt;!-- 更新前 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id1<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id2<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id3<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id4<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 删除后更新 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id2<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id3<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id4<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="其他优化" tabindex="-1"><a class="header-anchor" href="#其他优化"><span>其他优化</span></a></h4><ul><li>组件懒加载，可以是通过 Webpack 的动态导⼊和 <code>React.lazy</code> ⽅法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> lazy<span class="token punctuation">,</span> Suspense<span class="token punctuation">,</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span>
<span class="token keyword">const</span> Com <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./Component&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// ...</span>
<span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token string">&quot;加载...&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Com <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>虚拟滚动，react-window 和 react-virtualized， 常⻅⾯试题是：给你10000条数据⼀次性展⽰，怎么才不会卡，虚拟滚动的原理？</li><li>debounce、throttle 优化触发的回调，如input组件onChange防抖 Lodash</li><li>善⽤缓存，如上⾯⽤的useMemo，可以做⼀些耗时计算并保持引⽤不变，减少重新渲染</li></ul>`,91);function A(L,z){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,r,n("p",null,[k,d,n("a",v,[s("前端性能优化之利用 Chrome Dev Tools 进行页面性能分析 - 知乎"),t(a)]),s(),m,n("a",g,[s("FP、FCP、FMP、LCP 都是什么 P？ - 知乎"),t(a)])]),b,n("blockquote",null,[n("p",null,[f,s("是⼀组⽤于衡量 web 应⽤性能的标准接⼝，学习链接："),n("a",y,[s("Performance API"),t(a)])])]),h,n("ul",null,[n("li",null,[n("p",null,[n("a",q,[s("performance.timing"),t(a)]),s("可以获取⽹⻚运⾏过程中每个时间点对应的时间戳(绝对时间，ms)，但却即将"),w,j])]),n("li",null,[n("p",null,[n("a",x,[s("performance.getEntries()"),t(a)]),s("，以对象数组的⽅式返回所有资源的数据，包括 css，img，script， xmlhttprequest，link 等等")])]),n("li",null,[n("p",null,[n("a",P,[s("performance.getEntriesByType(:string)"),t(a)]),s("，和上⾯的 getEntries ⽅法类似，不过是多了⼀层类型 的筛选，常⻅性能类型可以有"),_])])]),C,n("ul",null,[n("li",null,[n("a",T,[s("performance.getEntriesByName(name:string,type?:string)"),t(a)]),s("，原理和上⾯的 getEntries ⽅法类似，多了⼀层名字的筛选，也可以传第⼆个参数再加⼀层类型的筛选")])]),E,n("ul",null,[n("li",null,[n("a",S,[s("performance.now()"),t(a)]),s("，返回当前时间与"),B,s("的时间差")])]),I,n("ul",null,[n("li",null,[n("a",M,[s("PerformanceObserver"),t(a)]),F])]),R])}const N=e(i,[["render",A],["__file","Performance.html.vue"]]),D=JSON.parse('{"path":"/advance/Performance.html","title":"Performance","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"为什么前端性能如此重要?","slug":"为什么前端性能如此重要","link":"#为什么前端性能如此重要","children":[]},{"level":2,"title":"⽹⻚性能指标及影响因素","slug":"网⻚性能指标及影响因素","link":"#网⻚性能指标及影响因素","children":[{"level":3,"title":"Timing","slug":"timing","link":"#timing","children":[]},{"level":3,"title":"关于 Performance API","slug":"关于-performance-api","link":"#关于-performance-api","children":[]},{"level":3,"title":"用户为导向性能指标介绍","slug":"用户为导向性能指标介绍","link":"#用户为导向性能指标介绍","children":[]},{"level":3,"title":"核心网页指标","slug":"核心网页指标","link":"#核心网页指标","children":[]},{"level":3,"title":"常⻅优化⼿段","slug":"常⻅优化手段","link":"#常⻅优化手段","children":[]},{"level":3,"title":"Vue性能优化常见策略","slug":"vue性能优化常见策略","link":"#vue性能优化常见策略","children":[]},{"level":3,"title":"React性能优化常⻅策略","slug":"react性能优化常⻅策略","link":"#react性能优化常⻅策略","children":[]}]}],"filePathRelative":"advance/Performance.md","git":{"createdTime":1715955258000,"updatedTime":1716035520000,"contributors":[{"name":"xiaoyu","email":"luoyu2003@outlook.com","commits":2}]},"readingTime":{"minutes":15.09,"words":4527}}');export{N as comp,D as data};
