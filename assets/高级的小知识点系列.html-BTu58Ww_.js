import{_ as n,o as s,c as a,e as t}from"./app-Bn7XLESk.js";const p={},e=t(`<h1 id="高级的小知识点系列" tabindex="-1"><a class="header-anchor" href="#高级的小知识点系列"><span>高级的小知识点系列</span></a></h1><h2 id="为什么-height-100-不起作用" tabindex="-1"><a class="header-anchor" href="#为什么-height-100-不起作用"><span>为什么 height:100%; 不起作用</span></a></h2><p>当设置一个页面元素的高度(height)为 100%时，期望这样元素能撑满整个浏览器窗口的高度，但大多数情况下，这样的做法没有任何效果。你知道为什么 height:100%不起作用吗？</p><p>按常理，当我们用 CSS 的 height 属性定义一个元素的高度时，这个元素应该按照设定在浏览器的纵向空间里扩展相应的空间距离。例如，如果一个 div 元素的 CSS 是 height: 100px;，那它应该在页面的竖向空间里占满 100px 的高度。</p><blockquote><p>而根据 W3C 的规范，百分比的高度在设定时需要根据这个元素的父元素容器的高度。所以，如果你把一个 div 的高度设定为 height: 50%;，而它的父元素的高度是 100px，那么，这个 div 的高度应该是 50px。</p></blockquote><p>当设计一个页面时，你在里面放置了一个 div 元素，你希望它占满整个窗口高度，最自然的做法，你会给这个 div 添加 height: 100%;的 css 属性。然而，如果你要是设置宽度为 width: 100%;，那这个元素的宽度会立刻扩展到窗口的整个横向宽度。高度也会这样吗？</p><p>错。</p><p>为了理解为什么不会，你需要理解浏览器是如何计算高度和宽度的。Web 浏览器在计算有效宽度时会考虑浏览器窗口的打开宽度。如果你不给宽度设定任何缺省值，那浏览器会自动将页面内容平铺填满整个横向宽度。</p><p>但是高度的计算方式完全不一样。事实上，浏览器根本就不计算内容的高度，除非内容超出了视窗范围(导致滚动条出现)。或者你给整个页面设置一个绝对高度。否则，浏览器就会简单的让内容往下堆砌，页面的高度根本就无需考虑。</p><p>因为页面并没有缺省的高度值，所以，当你让一个元素的高度设定为百分比高度时，无法根据获取父元素的高度，也就无法计算自己的高度。换句话说，<strong>父元素的高度只是一个缺省值：height: auto;。</strong> <code>当你要求浏览器根据这样一个缺省值来计算百分比高度时，只能得到undefined的结果。也就是一个null值，浏览器不会对这个值有任何的反应。</code></p><p>解决办法</p><p>那么，如果想让一个元素的百分比高度 height: 100%;起作用，你需要给这个元素的所有父元素的高度设定一个有效值。换句话说，你需要这样做：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这个div的高度就会100%了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你给了这个 div 的高度为 100%，它有两个父元素<code>&lt;body&gt;</code>和<code>&lt;html&gt;</code>。为了让你的 div 的百分比高度能起作用，你必须设定<code>&lt;body&gt;</code>和<code>&lt;html&gt;</code>的高度为 100%。</p><p>使用 height: 100%;时的注意事项</p><ol><li>Margins 和 padding 会让你的页面出现滚动条，也许这是你不希望的。</li><li>如果你的元素实际高度大于你设定的百分比高度，那元素的高度会自动扩展。</li></ol><h2 id="什么是尾调用" tabindex="-1"><a class="header-anchor" href="#什么是尾调用"><span>什么是尾调用</span></a></h2><p>尾部调用不会让栈（stack）无限制地增长。这让 递归算法在面对不做限制的输入时能够安全执行。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> acc <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> acc<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">*</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在如今的大部分实现中都将引起栈溢出（Stack overflow），</span>
<span class="token comment">// 但是在 ES2015 中处理任意数量的输入都是安全的</span>
<span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尾调用就是在函数执行的最后一步执行另一个函数。如下所示为尾调用：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的两种情况都不属于尾调用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过一个例子来看尾调用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">c</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面那种情况不是尾调用，下面的是尾调用。</p><p><strong>为什么说尾调用的性能要比没有使用尾调用的性能好呢？</strong></p><blockquote><p>我们都知道在 A 函数调用时会将 A 函数放入调用栈中，如果在 A 函数中存在另一个函数 B 调用，此时也会将 B 压入调用栈中，等待函数 B 调用完成后，此时才可以从调用栈中弹出函数 A 和函数 B。那如果使用尾调用时，当执行函数 A 时，将函数 A 压入调用栈中，<code>当执行 A 时发现存在函数 B，并且函数 B 为函数 A 的最后一步调用，此时可以将函数 A 从调用栈中弹出，将函数 B 压入调用栈中</code>。这样下来性能就做到了优化。</p></blockquote><p><strong>严格模式</strong></p><p>ES6 中的尾调用优化只在严格模式下开启，正常模式下无效。这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>arguments：返回调用时函数的参数。
func.caller：返回调用当前函数的那个函数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>尾调用优化时，函数的调用栈会被改写，因此上面的两个变量就会失真。严格模式下禁用这两个变量，所以尾调用模式仅在严格模式下生效。</p>`,34),c=[e];function o(l,i){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","高级的小知识点系列.html.vue"]]),r=JSON.parse('{"path":"/base/%E9%AB%98%E7%BA%A7%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E7%B3%BB%E5%88%97.html","title":"高级的小知识点系列","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"为什么 height:100%; 不起作用","slug":"为什么-height-100-不起作用","link":"#为什么-height-100-不起作用","children":[]},{"level":2,"title":"什么是尾调用","slug":"什么是尾调用","link":"#什么是尾调用","children":[]}],"filePathRelative":"base/高级的小知识点系列.md","git":{"createdTime":1724948335000,"updatedTime":1728309565000,"contributors":[{"name":"xiaoyu","email":"luoyu2003@outlook.com","commits":3}]},"readingTime":{"minutes":4.79,"words":1437}}');export{d as comp,r as data};
