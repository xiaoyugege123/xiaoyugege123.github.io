import{_ as s,r as e,o as p,c as t,a as n,b as l,d as i,e as o}from"./app-Bn7XLESk.js";const r="/imgs/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.png",c="/imgs/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/NetWork.png",d="/imgs/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/bundle-analyzer.png",u="/imgs/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/Performance.png",k="/imgs/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/Timing.png",h="/imgs/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%93%8D%E5%BA%94.png",m="/imgs/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E9%9B%AA%E7%A2%A7%E5%9B%BE.png",v="/imgs/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E9%80%BB%E8%BE%911.png",g="/imgs/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E9%80%BB%E8%BE%912.png",b={},_=n("h1",{id:"前端性能优化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前端性能优化"},[n("span",null,"前端性能优化")])],-1),E=n("p",null,[n("img",{src:r,alt:"性能"})],-1),f=n("strong",null,"参考文章：",-1),x=n("br",null,null,-1),y={href:"https://juejin.cn/post/7029973323475845150",target:"_blank",rel:"noopener noreferrer"},w=o('<h2 id="_1-重要性" tabindex="-1"><a class="header-anchor" href="#_1-重要性"><span>1.重要性：</span></a></h2><p>关注前端可以很好地提高性能。如果我们可以将后端响应时间缩短一半，整体响应时间只能减少 5%~10%。而如果关注前端性能，同样是将其响应时间减少一半，则整体响应时间可以减少 40%~45%。</p><p>改进前端通常只需要较少的时间和资源，减少后端延迟会带来很大的改动。</p><p>只有 10%~20%的最终用户响应时间花在了下载 HTML 文档上，其余的 80%~90%时间花在了下载页面中的所有组件上。</p><h2 id="_2-定位" tabindex="-1"><a class="header-anchor" href="#_2-定位"><span>2.定位：</span></a></h2><h3 id="_2-1-技术上的选择" tabindex="-1"><a class="header-anchor" href="#_2-1-技术上的选择"><span>2.1 技术上的选择</span></a></h3><p>在前端日常开发中，技术上的选择是非常重要的。为什么要讲这个呢？因为现象频发。</p><p>前端工程化严重的当下，轻量化的框架慢慢被遗忘掉了。并不是所有的业务场景都适合使用工程化框架，react/vue 并不轻量。</p><blockquote><p>复杂的框架是为了解决复杂的业务</p></blockquote><p>如果研发 h5、PC 展示等场景简单的业务时候，javascript 原生 配合一些轻量化插件更适合。</p><p>多页面应用也并不都是缺点。根据业务不同而选择不一样的技术是非常重要的，是每个前端都应该反思的事情。</p><p>这方面是导致卡顿的关键问题。</p><h3 id="_2-2-network" tabindex="-1"><a class="header-anchor" href="#_2-2-network"><span>2.2 NetWork</span></a></h3><p>我们的老朋友 NetWork 想必前端同学都很熟悉。我们先来看一下 network 面板 <img src="'+c+'" alt="NetWork"> 从面板上我们可以看出一些信息：</p><ul><li>请求资源 size</li><li>请求资源时长</li><li>请求资源数量</li><li>接口响应时长</li><li>接口发起数量</li><li>接口报文 size</li><li>接口响应状态</li><li>瀑布图</li></ul><p>瀑布图是什么呢？</p><p>瀑布图就是上方图片后面的 waterfall 纵列</p><p>瀑布图是一个级联图, 展示了浏览器如何加载资源并渲染成网页. 图中的每一行都是一次单独的浏览器请求. 这个图越长, 说明加载网页过程中所发的请求越多. 每一行的宽度, 代表浏览器发出请求并下载该资源的过程中所耗费的时间。它的侧重点在于分析网路链路</p><p>瀑布图颜色说明：</p><ul><li><p>DNS Lookup [深绿色] - 在浏览器和服务器进行通信之前, 必须经过 DNS 查询, 将域名转换成 IP 地址. 在这个阶段, 你可以处理的东西很少. 但幸运的是, 并非所有的请求都需要经过这一阶段.</p></li><li><p>Initial Connection [橙色] - 在浏览器发送请求之前, 必须建立 TCP 连接. 这个过程仅仅发生在瀑布图中的开头几行, 否则这就是个性能问题(后边细说).</p></li><li><p>SSL/TLS Negotiation [紫色] - 如果你的页面是通过 SSL/TLS 这类安全协议加载资源, 这段时间就是浏览器建立安全连接的过程. 目前 Google 将 HTTPS 作为其 搜索排名因素 之一, SSL/TLS 协商的使用变得越来越普遍了.</p></li><li><p>Time To First Byte (TTFB) [绿色] - TTFB 是浏览器请求发送到服务器的时间+服务器处理请求时间+响应报文的第一字节到达浏览器的时间. 我们用这个指标来判断你的 web 服务器是否性能不够, 或者说你是否需要使用 CDN.</p></li><li><p>Downloading (蓝色) - 这是浏览器用来下载资源所用的时间. 这段时间越长, 说明资源越大. 理想情况下, 你可以通过控制资源的大小来控制这段时间的长度.</p></li></ul><p>那么除了瀑布图的长度外，我们如何才能判断一个瀑布图的状态是健康的呢？</p><ul><li><p>首先, 减少所有资源的加载时间. 亦即减小瀑布图的宽度. 瀑布图越窄, 网站的访问速度越快.</p></li><li><p>其次, 减少请求数量 也就是降低瀑布图的高度. 瀑布图越矮越好.</p></li><li><p>最后, 通过优化资源请求顺序来加快渲染时间. 从图上看, 就是将绿色的&quot;开始渲染&quot;线向左移. 这条线向左移动的越远越好.</p></li></ul><p>这样，我们就可以从 network 的角度去排查“慢”的问题。</p><h3 id="_2-3-webpack-bundle-analyzer" tabindex="-1"><a class="header-anchor" href="#_2-3-webpack-bundle-analyzer"><span>2.3 webpack-bundle-analyzer</span></a></h3><p>项目构建后生成的 bundle 包是压缩后的。webpack-bundle-analyzer 是一款包分析工具。</p><p>我们先来看一下它能带来的效果。如下图： <img src="'+d+`" alt="打包分析"></p><p>从上图来看，我们的 bundle 包被解析的一览无余。其中模块面积占的越大说明在 bundle 包中 size 越大。就值得注意了，重点优化一下。</p><p>它能够排查出来的信息有</p><p>显示包中所有打入的模块 显示模块 size 及 gzip 后的 size 排查包中的模块情形是非常有必要的，通过 webpack-bundle-analyzer 来排查出一些无用的模块，过大的模块。然后进行优化。以减少我们的 bundle 包 size，减少加载时长。</p><p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># NPM</span>
<span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack-bundle-analyzer
<span class="token comment"># Yarn</span>
<span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> webpack-bundle-analyzer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用(as a Webpack-Plugin)</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> BundleAnalyzerPlugin <span class="token operator">=</span>
  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack-bundle-analyzer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BundleAnalyzerPlugin<span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后构建包完毕后会自动弹出一个窗口展示上图信息。</p><h3 id="_2-4-performance" tabindex="-1"><a class="header-anchor" href="#_2-4-performance"><span>2.4 Performance</span></a></h3><p>chrome 自带的 performance 模块。先附上一个官网文档传送门：Performance</p><p>可以检测很多方面的数据，多数情况的性能排查上用的比较多。如果想要深入了解的同学建议去看一下官方文档。</p><p>接下来我们来说一下在 performance 面板中如何排差“慢”的问题，它给我们提供了哪些信息呢。先附上一张 performance 的面板图片。 <img src="`+u+`" alt="Performance"> 从上图中可以分析出一些指标</p><ul><li>FCP/LCP 时间是否过长？</li><li>请求并发情况 是否并发频繁？</li><li>请求发起顺序 请求发起顺序是否不对？</li><li>javascript 执行情况 javascript 执行是否过慢？</li></ul><p>这些指标就是我们需要重点关注的，当然 performance 的功能并不止于此。</p><p>先记住如何获取到这些指标，后面来一一进行解析优化。</p><h3 id="_2-5-performancenavigationtiming" tabindex="-1"><a class="header-anchor" href="#_2-5-performancenavigationtiming"><span>2.5 PerformanceNavigationTiming</span></a></h3><p>获取各个阶段的响应时间，我们所要用到的接口是 PerformanceNavigationTiming 接口。</p><p>PerformanceNavigationTiming 提供了用于存储和检索有关浏览器文档事件的指标的方法和属性。 例如，此接口可用于确定加载或卸载文档需要多少时间。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">showNavigationDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>entry<span class="token punctuation">]</span> <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">getEntriesByType</span><span class="token punctuation">(</span><span class="token string">&quot;navigation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用这个函数，我们就可以获取各个阶段的响应时间，如图： <img src="`+k+`" alt="hh"> 参数说明</p><blockquote><ul><li>navigationStart 加载起始时间</li><li>redirectStart 重定向开始时间（如果发生了 HTTP 重定向，每次重定向都和当前文档同域的话，就返回开始重定向的 fetchStart 的值。其他情况，则返回 0）</li><li>redirectEnd 重定向结束时间（如果发生了 HTTP 重定向，每次重定向都和当前文档同域的话，就返回最后一次重定向接受完数据的时间。其他情况则返回 0）</li><li>fetchStart 浏览器发起资源请求时，如果有缓存，则返回读取缓存的开始时间</li><li>domainLookupStart 查询 DNS 的开始时间。如果请求没有发起 DNS 请求，如 keep-alive，缓存等，则返回 fetchStart</li><li>domainLookupEnd 查询 DNS 的结束时间。如果没有发起 DNS 请求，同上</li><li>connectStart 开始建立 TCP 请求的时间。如果请求是 keep-alive，缓存等，则返回 domainLookupEnd</li><li>(secureConnectionStart) 如果在进行 TLS 或 SSL，则返回握手时间</li><li>connectEnd 完成 TCP 链接的时间。如果是 keep-alive，缓存等，同 connectStart</li><li>requestStart 发起请求的时间</li><li>responseStart 服务器开始响应的时间</li><li>domLoading 从图中看是开始渲染 dom 的时间，具体未知</li><li>domInteractive 未知</li><li>domContentLoadedEventStart 开始触发 DomContentLoadedEvent 事件的时间</li><li>domContentLoadedEventEnd DomContentLoadedEvent 事件结束的时间</li><li>domComplete 从图中看是 dom 渲染完成时间，具体未知</li><li>loadEventStart 触发 load 的时间，如没有则返回 0</li><li>loadEventEnd load 事件执行完的时间，如没有则返回 0</li><li>unloadEventStart unload 事件触发的时间</li><li>unloadEventEnd unload 事件执行完的时间</li></ul></blockquote><p>关于我们的 Web 性能，我们会用到的时间参数：</p><ul><li>DNS 解析时间： domainLookupEnd - domainLookupStart</li><li>TCP 建立连接时间： connectEnd - connectStart</li><li>白屏时间： responseStart - navigationStart</li><li>dom 渲染完成时间： domContentLoadedEventEnd - navigationStart</li><li>页面 onload 时间： loadEventEnd - navigationStart</li></ul><p>根据这些时间参数，我们就可以判断哪一阶段对性能有影响。</p><h3 id="_2-6-抓包" tabindex="-1"><a class="header-anchor" href="#_2-6-抓包"><span>2.6 抓包</span></a></h3><p>有一些业务状况是没有上述的一些调试工具该怎么办呢？我们可以利用抓包工具进行对页面信息对抓取，上述我们通过 chrome 工具排查出来的指标，也可以通过抓包工具进行抓取。</p><p>这里我推荐一款抓包工具 charles。</p><h3 id="_2-7-性能测试工具" tabindex="-1"><a class="header-anchor" href="#_2-7-性能测试工具"><span>2.7 性能测试工具</span></a></h3><ul><li>Pingdom</li><li>Load Impact</li><li>WebPage Test</li><li>Octa Gate Site Timer</li><li>Free Speed Test</li></ul><h2 id="_3-优化" tabindex="-1"><a class="header-anchor" href="#_3-优化"><span>3.优化：</span></a></h2><p>前端的优化种类繁多，主要包含三个方面的优化：网络优化（对加载时所消耗的网络资源优化），代码优化（资源加载完后，脚本解释执行的速度），框架优化（选择性能较好的框架，比如 benchmark）。</p><h3 id="_3-1-tree-shaking" tabindex="-1"><a class="header-anchor" href="#_3-1-tree-shaking"><span>3.1 tree shaking</span></a></h3><p>中文（摇树），webpack 构建优化中重要一环。摇树用于清除我们项目中的一些无用代码，它依赖于 ES 中的模块语法。</p><p>比如日常使用 lodash 的时候</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果如上引用 lodash 库，在构建包的时候是会把整个 lodash 包打入到我们的 bundle 包中的。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> _isEmpty <span class="token keyword">from</span> <span class="token string">&quot;lodash/isEmpty&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果如上引用 lodash 库，在构建包的时候只会把 isEmpty 这个方法抽离出来再打入到我们的 bundle 包中。</p><p>这样的化就会大大减少我们包的 size。所以在日常引用第三方库的时候，需要注意导入的方式。</p><p>如何开启摇树</p><p>在 webpack4.x 中默认对 tree-shaking 进行了支持。 在 webpack2.x 中使用 tree-shaking：传送门</p><h3 id="_3-2-split-chunks" tabindex="-1"><a class="header-anchor" href="#_3-2-split-chunks"><span>3.2 split chunks</span></a></h3><p>中文（分包）</p><p>在没配置任何东西的情况下，webpack 4 就智能的帮你做了代码分包。入口文件依赖的文件都被打包进了 main.js，那些大于 30kb 的第三方包，如：echarts、xlsx、dropzone 等都被单独打包成了一个个独立 bundle。</p><p>其它被我们设置了异步加载的页面或者组件变成了一个个 chunk，也就是被打包成独立的 bundle。</p><p>它内置的代码分割策略是这样的：</p><blockquote><ul><li>新的 chunk 是否被共享或者是来自 node_modules 的模块</li><li>新的 chunk 体积在压缩之前是否大于 30kb</li><li>按需加载 chunk 的并发请求数量小于等于 5 个</li><li>页面初始加载时的并发请求数量小于等于 3 个</li></ul></blockquote><p>大家可以根据自己的项目环境来更改配置。配置代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">splitChunks</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">vendors</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">chunk-vendors</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&quot;initial&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dll</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">chunk-dll</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]bizcharts|[\\\\/]\\@antv[\\\\/]data-set</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">common</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">chunk-common</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有使用 webpack4.x 版本的项目，依然可以通过按需加载的形式进行分包，使得我们的包分散开，提升加载性能。</p><p>按需加载也是以前分包的重要手段之一</p><p>这里推荐一篇非常好的文章：webpack 如何使用按需加载</p><h3 id="_3-3-拆包" tabindex="-1"><a class="header-anchor" href="#_3-3-拆包"><span>3.3 拆包</span></a></h3><p>与 3.2 的分包不同。大家可能没发现，上面 2.3 的 bundle 包解析中有个有趣的现象，上面项目的技术栈是 react，但是 bundle 包中并没有 react、react-dom、react-router 等。</p><p>因为把这些插件“拆”开了。并没有一起打在 bundle 中。而是放在了 CDN 上。下面我举一个例子来解释一下。</p><p>假设：原本 bundle 包为 2M，一次请求拉取。拆分为 bundle（1M） + react 桶（CDN）（1M） 两次请求并发拉取。</p><p>从这个角度来看，1+1 的模式拉取资源更快。</p><p>换一个角度来说，全量部署项目的情况，每次部署 bundle 包都将重新拉取。比较浪费资源。react 桶的方式可以命中强缓存，这样的化，就算全量部署也只需要重新拉取左侧 1M 的 bundle 包即可，节省了服务器资源。优化了加载速度。</p><p>注意：在本地开发过程中，react 等资源建议不要引入 CDN，开发过程中刷新频繁，会增加 CDN 服务其压力，走本地就好。</p><h3 id="_3-4-gzip" tabindex="-1"><a class="header-anchor" href="#_3-4-gzip"><span>3.4 gzip</span></a></h3><p>服务端配置 gzip 压缩后可大大缩减资源大小。</p><p>Nginx 配置方式</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>http <span class="token punctuation">{</span>
  gzip on<span class="token punctuation">;</span>
  gzip_buffers <span class="token number">32</span> 4K<span class="token punctuation">;</span>
  gzip_comp_level <span class="token number">6</span><span class="token punctuation">;</span>
  gzip_min_length <span class="token number">100</span><span class="token punctuation">;</span>
  gzip_types application<span class="token operator">/</span>javascript text<span class="token operator">/</span>css text<span class="token operator">/</span>xml<span class="token punctuation">;</span>
  gzip_disable <span class="token string">&quot;MSIE [1-6]\\.&quot;</span><span class="token punctuation">;</span>
  gzip_vary on<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成后在 response header 中可以查看。 <img src="`+h+'" alt=""></p><h3 id="_3-5-图片压缩" tabindex="-1"><a class="header-anchor" href="#_3-5-图片压缩"><span>3.5 图片压缩</span></a></h3><p>开发中比较重要的一个环节，我司自己的图床工具是自带压缩功能的，压缩后直接上传到 CDN 上。</p><p>如果公司没有图床工具，我们该如何压缩图片呢？我推荐几种我常用的方式</p><ul><li>智图压缩 (百度很难搜到官网了，免费、批量、好用)</li><li>tinypng(免费、批量、速度块)</li><li>fireworks 工具压缩像素点和尺寸 (自己动手，掌握尺度)</li><li>找 UI 压缩后发给你</li></ul><p>图片压缩是常用的手法，因为设备像素点的关系，UI 给予的图片一般都是 x2，x4 的，所以压缩就非常有必要。</p><h3 id="_3-6-图片分割" tabindex="-1"><a class="header-anchor" href="#_3-6-图片分割"><span>3.6 图片分割</span></a></h3><p>如果页面中有一张效果图，比如真机渲染图，UI 手拿着刀不让你压缩。这时候不妨考虑一下分割图片。</p><p>建议单张土图片的大小不要超过 100k，我们在分割完图片后，通过布局再拼接在一起。可以图片加载效率。</p><p>这里注意一点，分割后的每张图片一定要给 height，否则网速慢的情况下样式会塌陷。</p><h3 id="_3-7-sprite" tabindex="-1"><a class="header-anchor" href="#_3-7-sprite"><span>3.7 sprite</span></a></h3><p>南方叫精灵图，北方叫雪碧图。这个现象就很有趣。</p><p>在网站中有很多小图片的时候，一定要把这些小图片合并为一张大的图片，然后通过 background 分割到需要展示的图片。</p><p>这样的好处是什么呢？先来普及一个规则</p><p>浏览器请求资源的时候，同源域名请求资源的时候有最大并发限制，chrome 为 6 个，就比如你的页面上有 10 个相同 CDN 域名小图片，那么需要发起 10 次请求去拉取，分两次并发。第一次并发请求回来后，发起第二次并发。</p><p>如果你把 10 个小图片合并为一张大图片的画，那么只用一次请求即可拉取下来 10 个小图片的资源。减少服务器压力，减少并发，减少请求次数。</p><p>附上一个 sprite 的例子。 <img src="'+m+'" alt="雪碧"></p><h3 id="_3-8-cdn" tabindex="-1"><a class="header-anchor" href="#_3-8-cdn"><span>3.8 CDN</span></a></h3><p>中文（内容分发网络），服务器是中心化的，CDN 是“去中心化的”。</p><p>在项目中有很多东西都是放在 CDN 上的，比如：静态文件，音频，视频，js 资源，图片。那么为什么用 CDN 会让资源加载变快呢？</p><p>举个简单的例子：</p><p>以前买火车票大家都只能去火车站买，后来我们买火车票就可以在楼下的火车票代售点买了。</p><p>你细品。</p><p>所以静态资源度建议放在 CDN 上，可以加快资源加载的速度。</p><h3 id="_3-9-懒加载" tabindex="-1"><a class="header-anchor" href="#_3-9-懒加载"><span>3.9 懒加载</span></a></h3><p>懒加载也叫延迟加载，指的是在长网页中延迟加载图像，是一种非常好的优化网页性能的方式。</p><p>当可视区域没有滚到资源需要加载的地方时候，可视区域外的资源就不会加载。</p><p>可以减少服务器负载，常适用于图片很多，页面较长的业务场景中。</p><p>如何使用懒加载呢？</p><p>图片懒加载 layzr.js</p><h3 id="_3-10-iconfont" tabindex="-1"><a class="header-anchor" href="#_3-10-iconfont"><span>3.10 iconfont</span></a></h3><p>中文（字体图表），现在比较流行的一种用法。使用字体图表有几种好处</p><blockquote><ul><li>矢量</li><li>轻量</li><li>易修改</li><li>不占用图片资源请求。</li></ul></blockquote><p>就像上面说的雪碧图，如果都用字体图标来替换的画，一次请求都免了，可以直接打到 bundle 包中。</p><p>使用前提是 UI 给点力，设计趋向于字体图标，提前给好资源，建立好字体图标库。</p><h3 id="_3-11-逻辑后移" tabindex="-1"><a class="header-anchor" href="#_3-11-逻辑后移"><span>3.11 逻辑后移</span></a></h3><p>逻辑后移是一种比较常见的优化手段。用一个打开文章网站的操作来举个例子。</p><p>没有逻辑后移处理的请求顺序是这个样子的 <img src="'+v+'" alt="first"> 页面的展示主体是文章展示，如果文章展示的请求靠后了，那么渲染文章出来的时间必然靠后，因为有可能因为请求阻塞等情况，影响请求响应情况，如果超过一次并发的情况的话，会更加的慢。如图的这种情况也是在我们项目中发生过的。</p><p>很明显我们应该把主体“请求文章”接口前移，把一些非主体的请求逻辑后移。这样的话可以尽快的把主体渲染出来，就会快很多。</p><p>优化后的顺序是这个样子的。 <img src="'+g+`" alt="second"> 在平常的开发中建议时常注意逻辑后移的情况，突出主体逻辑。可以极大的提升用户体验。</p><h3 id="_3-12-算法复杂度" tabindex="-1"><a class="header-anchor" href="#_3-12-算法复杂度"><span>3.12 算法复杂度</span></a></h3><p>在数据量大的应用场景中，需要着重注意算法复杂度问题。</p><p>在这个方面可以参考 Javascript 算法之复杂度分析这篇文章。</p><p>如上面 Performance 解析出的 Javascript 执行指标上，可以推测出来你的 code 执行效率如何，如果执行时间过长就要考虑一下是否要优化一下复杂度了。</p><p>在时间换空间，空间换时间的选择上，要根据业务场景来进行取舍。</p><h3 id="_3-13-组件渲染" tabindex="-1"><a class="header-anchor" href="#_3-13-组件渲染"><span>3.13 组件渲染</span></a></h3><p>拿 react 举例，组件分割方面不要太深。需要控制组件的渲染，尤其是深层组件的 render。</p><p>老生常谈的话题，我们可以一些方式来优化组件渲染</p><ul><li>声明周期控制 - 比如 react 的 shouldComponentUpdate 来控制组件渲染。</li><li>官网提供的 api- PureComponent</li><li>控制注入组件的参数</li><li>分配组件唯一 key</li><li>没有必要的渲染是对性能的极大浪费。</li></ul><h3 id="_3-14-node-middleware" tabindex="-1"><a class="header-anchor" href="#_3-14-node-middleware"><span>3.14 node middleware</span></a></h3><p>中文（node 中间件）</p><p>中间件主要是指封装所有 Http 请求细节处理的方法。一次 Http 请求通常包含很多工作，如记录日志、ip 过滤、查询字符串、请求体解析、Cookie 处理、权限验证、参数验证、异常处理等，但对于 Web 应用而言，并不希望接触到这么多细节性的处理，因此引入中间件来简化和隔离这些基础设施与业务逻辑之间的细节，让我们能够关注在业务的开发上，以达到提升开发效率的目的。</p><p>使用 node middleware 合并请求。减少请求次数。这种方式也是非常实用的。</p><h3 id="_3-15-web-worker" tabindex="-1"><a class="header-anchor" href="#_3-15-web-worker"><span>3.15 web worker</span></a></h3><p>Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</p><p>合理实用 web worker 可以优化复杂计算任务。这里直接抛阮一峰的入门文章：传送门</p><h3 id="_3-16-缓存" tabindex="-1"><a class="header-anchor" href="#_3-16-缓存"><span>3.16 缓存</span></a></h3><p>缓存的原理就是更快读写的存储介质+减少 IO+减少 CPU 计算=性能优化。而性能优化的第一定律就是：优先考虑使用缓存。</p><p>缓存的主要手段有：浏览器缓存、CDN、反向代理、本地缓存、分布式缓存、数据库缓存。</p><h3 id="_3-17-gpu-渲染" tabindex="-1"><a class="header-anchor" href="#_3-17-gpu-渲染"><span>3.17 GPU 渲染</span></a></h3><p>每个网页或多或少都涉及到一些 CSS 动画，通常简单的动画对于性能的影响微乎其微，然而如果涉及到稍显复杂的动画，不当的处理方式会使性能问题变得十分突出。</p><p>像 Chrome, FireFox, Safari, IE9+和最新版本的 Opera 都支持 GPU 加速，当它们检测到页面中某个 DOM 元素应用了某些 CSS 规则时就会开启。</p><p>虽然我们可能不想对元素应用 3D 变换，可我们一样可以开启 3D 引擎。例如我们可以用 transform: translateZ(0) 来开启 GPU 加速 。</p><p>只对我们需要实现动画效果的元素应用以上方法，如果仅仅为了开启硬件加速而随便乱用，那是不合理的。</p><h3 id="_3-18-ajax-可缓存" tabindex="-1"><a class="header-anchor" href="#_3-18-ajax-可缓存"><span>3.18 Ajax 可缓存</span></a></h3><p>Ajax 在发送的数据成功后，为了提高页面的响应速度和用户体验，会把请求的 URL 和返回的响应结果保存在缓存内，当下一次调用 Ajax 发送相同的请求（URL 和参数完全相同）时，它就会直接从缓存中拿数据。</p><p>在进行 Ajax 请求的时候，可以选择尽量使用 get 方法，这样可以使用客户端的缓存，提高请求速度。</p><h3 id="_3-19-resource-hints" tabindex="-1"><a class="header-anchor" href="#_3-19-resource-hints"><span>3.19 Resource Hints</span></a></h3><p>Resource Hints(资源预加载)是非常好的一种性能优化方法，可以大大降低页面加载时间，给用户更加流畅的用户体验。</p><p>现代浏览器使用大量预测优化技术来预测用户行为和意图，这些技术有预连接、资源与获取、资源预渲染等。</p><p>Resource Hints 的思路有如下两个：</p><ul><li>当前将要获取资源的列表</li><li>通过当前页面或应用的状态、用户历史行为或 session 预测用户行为及必需的资源</li></ul><p>实现 Resource Hints 的方法有很多种，可分为基于 link 标签的 DNS-prefetch、subresource、preload、 prefetch、preconnect、prerender，和本地存储 localStorage。</p><h3 id="_3-20-ssr" tabindex="-1"><a class="header-anchor" href="#_3-20-ssr"><span>3.20 SSR</span></a></h3><p>渲染过程在服务器端完成，最终的渲染结果 HTML 页面通过 HTTP 协议发送给客户端，又被认为是‘同构&#39;或‘通用&#39;，如果你的项目有大量的 detail 页面，相互特别频繁，建议选择服务端渲染。</p><p>服务端渲染(SSR)除了 SEO 还有很多时候用作首屏优化，加快首屏速度，提高用户体验。但是对服务器有要求，网络传输数据量大，占用部分服务器运算资源。</p><p>Vue 的 Nuxt.js 和 React 的 next.js 都是服务端渲染的方法。</p><h3 id="_3-21-unpkg" tabindex="-1"><a class="header-anchor" href="#_3-21-unpkg"><span>3.21 UNPKG</span></a></h3><p>UNPKG 是一个提供 npm 包进行 CDN 加速的站点，因此，可以将一些比较固定了依赖写入 html 模版中，从而提高网页的性能。首先，需要将这些依赖声明为 external，以便 webpack 打包时不从 node_modules 中加载这些资源，配置如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;react&#39;</span><span class="token operator">:</span> <span class="token string">&#39;React&#39;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其次，你需要将所依赖的资源写在 html 模版中，这一步需要用到 html-webpack-plugin。下面是一段示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>htmlWebpackPlugin<span class="token punctuation">.</span>options<span class="token punctuation">.</span>node_env <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://unpkg.com/react@16.7.0/umd/react.development.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://unpkg.com/react@16.7.0/umd/react.production.min.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码需要注入 node_env，以便在开发的时候能够获得更友好的错误提示。也可以选择一些比较自动的库，来帮助我们完成这个过程，比如 webpack-cdn-plugin，或者 dynamic-cdn-webpack-plugin。</p><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结"><span>4.总结：</span></a></h2><p>还有一些比较常用的优化方法我没有列举出来，例如将样式表放在顶部，将脚本放在底部，减少重绘，按需加载，模块化等。方法很多，对症下药才是关键。</p><p>借鉴了很多大佬最后总结出来的文章，希望自己和同为菜鸟的小伙伴可以永远怀着一颗学徒的心。</p>`,175);function C(S,j){const a=e("ExternalLinkIcon");return p(),t("div",null,[_,E,n("p",null,[f,x,n("a",y,[l("web前端性能优化（全汇总）"),i(a)])]),w])}const B=s(b,[["render",C],["__file","前端性能优化.html.vue"]]),N=JSON.parse('{"path":"/advance/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html","title":"前端性能优化","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1.重要性：","slug":"_1-重要性","link":"#_1-重要性","children":[]},{"level":2,"title":"2.定位：","slug":"_2-定位","link":"#_2-定位","children":[{"level":3,"title":"2.1 技术上的选择","slug":"_2-1-技术上的选择","link":"#_2-1-技术上的选择","children":[]},{"level":3,"title":"2.2 NetWork","slug":"_2-2-network","link":"#_2-2-network","children":[]},{"level":3,"title":"2.3 webpack-bundle-analyzer","slug":"_2-3-webpack-bundle-analyzer","link":"#_2-3-webpack-bundle-analyzer","children":[]},{"level":3,"title":"2.4 Performance","slug":"_2-4-performance","link":"#_2-4-performance","children":[]},{"level":3,"title":"2.5 PerformanceNavigationTiming","slug":"_2-5-performancenavigationtiming","link":"#_2-5-performancenavigationtiming","children":[]},{"level":3,"title":"2.6 抓包","slug":"_2-6-抓包","link":"#_2-6-抓包","children":[]},{"level":3,"title":"2.7 性能测试工具","slug":"_2-7-性能测试工具","link":"#_2-7-性能测试工具","children":[]}]},{"level":2,"title":"3.优化：","slug":"_3-优化","link":"#_3-优化","children":[{"level":3,"title":"3.1 tree shaking","slug":"_3-1-tree-shaking","link":"#_3-1-tree-shaking","children":[]},{"level":3,"title":"3.2 split chunks","slug":"_3-2-split-chunks","link":"#_3-2-split-chunks","children":[]},{"level":3,"title":"3.3 拆包","slug":"_3-3-拆包","link":"#_3-3-拆包","children":[]},{"level":3,"title":"3.4 gzip","slug":"_3-4-gzip","link":"#_3-4-gzip","children":[]},{"level":3,"title":"3.5 图片压缩","slug":"_3-5-图片压缩","link":"#_3-5-图片压缩","children":[]},{"level":3,"title":"3.6 图片分割","slug":"_3-6-图片分割","link":"#_3-6-图片分割","children":[]},{"level":3,"title":"3.7 sprite","slug":"_3-7-sprite","link":"#_3-7-sprite","children":[]},{"level":3,"title":"3.8 CDN","slug":"_3-8-cdn","link":"#_3-8-cdn","children":[]},{"level":3,"title":"3.9 懒加载","slug":"_3-9-懒加载","link":"#_3-9-懒加载","children":[]},{"level":3,"title":"3.10 iconfont","slug":"_3-10-iconfont","link":"#_3-10-iconfont","children":[]},{"level":3,"title":"3.11 逻辑后移","slug":"_3-11-逻辑后移","link":"#_3-11-逻辑后移","children":[]},{"level":3,"title":"3.12 算法复杂度","slug":"_3-12-算法复杂度","link":"#_3-12-算法复杂度","children":[]},{"level":3,"title":"3.13 组件渲染","slug":"_3-13-组件渲染","link":"#_3-13-组件渲染","children":[]},{"level":3,"title":"3.14 node middleware","slug":"_3-14-node-middleware","link":"#_3-14-node-middleware","children":[]},{"level":3,"title":"3.15 web worker","slug":"_3-15-web-worker","link":"#_3-15-web-worker","children":[]},{"level":3,"title":"3.16 缓存","slug":"_3-16-缓存","link":"#_3-16-缓存","children":[]},{"level":3,"title":"3.17 GPU 渲染","slug":"_3-17-gpu-渲染","link":"#_3-17-gpu-渲染","children":[]},{"level":3,"title":"3.18 Ajax 可缓存","slug":"_3-18-ajax-可缓存","link":"#_3-18-ajax-可缓存","children":[]},{"level":3,"title":"3.19 Resource Hints","slug":"_3-19-resource-hints","link":"#_3-19-resource-hints","children":[]},{"level":3,"title":"3.20 SSR","slug":"_3-20-ssr","link":"#_3-20-ssr","children":[]},{"level":3,"title":"3.21 UNPKG","slug":"_3-21-unpkg","link":"#_3-21-unpkg","children":[]}]},{"level":2,"title":"4.总结：","slug":"_4-总结","link":"#_4-总结","children":[]}],"filePathRelative":"advance/前端性能优化.md","git":{"createdTime":1715955258000,"updatedTime":1717914125000,"contributors":[{"name":"xiaoyu","email":"luoyu2003@outlook.com","commits":3}]},"readingTime":{"minutes":20.49,"words":6148}}');export{B as comp,N as data};
