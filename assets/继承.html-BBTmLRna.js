import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-Bn7XLESk.js";const i={},u=n("h1",{id:"js-继承",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#js-继承"},[n("span",null,"JS 继承")])],-1),r=n("h2",{id:"js继承-es5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#js继承-es5"},[n("span",null,"JS继承-ES5")])],-1),k=n("p",null,[s("这一节咱们来学习如何在JS中实现"),n("strong",null,"继承"),s("，首先看看在ES6之前可以如何实现继承")],-1),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain",target:"_blank",rel:"noopener noreferrer"},v={href:"https://zh.wikipedia.org/wiki/%E7%BB%A7%E6%89%BF_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.ituring.com.cn/book/2472",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create",target:"_blank",rel:"noopener noreferrer"},h={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",target:"_blank",rel:"noopener noreferrer"},g=e(`<p><b>继承：</b>继承可以使子类具有父类的各种属性和方法，而不需要再次编写相同的代码</p><p>这一节咱们会学习ES5中常见的继承写法(命名来源于 <strong>《JavaScript高级程序设计》</strong>)</p><ol><li>原型链实现继承</li><li>构造函数继承</li><li>组合继承</li><li>原型式继承</li><li>寄生式继承</li><li>寄生组合式继承</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类</span>
<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>foods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;西蓝花&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;西红柿&#39;</span><span class="token punctuation">]</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayFoods</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>foods<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="es5-原型链实现继承" tabindex="-1"><a class="header-anchor" href="#es5-原型链实现继承"><span>ES5-原型链实现继承</span></a></h3><p>**核心步骤：**希望继承谁，就将谁作为原型</p><p>**缺点：**父类中的引用数据类型，会被所有子类共享</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类</span>
<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>foods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;西蓝花&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;西红柿&#39;</span><span class="token punctuation">]</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayFoods</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>foods<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 子类</span>
<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token comment">// 将父类的实例 作为子类的原型</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s1<span class="token punctuation">.</span><span class="token function">sayFoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// [&#39;西蓝花&#39;, &#39;西红柿&#39;]</span>

<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s2<span class="token punctuation">.</span><span class="token function">sayFoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;西蓝花&#39;, &#39;西红柿&#39;]</span>

s2<span class="token punctuation">.</span>foods<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;西葫芦&#39;</span><span class="token punctuation">)</span>

s2<span class="token punctuation">.</span><span class="token function">sayFoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// [&#39;西蓝花&#39;, &#39;西红柿&#39;, &#39;西葫芦&#39;]</span>
s1<span class="token punctuation">.</span><span class="token function">sayFoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// [&#39;西蓝花&#39;, &#39;西红柿&#39;, &#39;西葫芦&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="面试回答" tabindex="-1"><a class="header-anchor" href="#面试回答"><span>面试回答：</span></a></h4><p>ES5-原型链实现继承</p><ol><li>将父类的实例作为子类的原型实现继承</li><li>这种继承方法的缺点是父类中的引用类型数据会被所有子类共享</li></ol><h3 id="es5-构造函数继承" tabindex="-1"><a class="header-anchor" href="#es5-构造函数继承"><span>ES5-构造函数继承</span></a></h3><p>**核心步骤：**在子类的构造函数中通过<code>call</code>或<code>apply</code>父类的构造函数</p><p>**缺点：**子类没法使用父类原型上的属性/方法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类</span>
<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>
<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//放在构造函数里面就不会报错！</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;你好,我叫:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类</span>
<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">&#39;lucy&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">&#39;rose&#39;</span><span class="token punctuation">)</span>
s1<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="面试回答-1" tabindex="-1"><a class="header-anchor" href="#面试回答-1"><span>面试回答：</span></a></h4><p>ES5-构造函数继承</p><ol><li>在子类的构造函数中通过<code>call</code>或者<code>apply</code>调用父类的构造函数</li><li>这种继承方法的缺点是:子类没法使用父类原型上的属性/方法</li></ol><h3 id="es5-组合继承" tabindex="-1"><a class="header-anchor" href="#es5-组合继承"><span>ES5-组合继承</span></a></h3><p>通过组合继承,结合上面2种方法的优点</p><p><strong>核心步骤：</strong></p><ol><li>通过原型链继承公共的属性和方法</li><li>通过构造函数继承实例独有的属性和方法</li></ol><p>**特点：**调用了2次构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>
<span class="token comment">// 方法加父类原型上</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你好，我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 子类构造函数</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用父类构造函数传入this</span>
  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
  <span class="token comment">// 子类独有的属性和方法单独设置</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token comment">// 设置子类的原型为 父类实例</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 调用子类的构造函数</span>
<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&#39;李雷&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
<span class="token comment">// 可以使用原型链上的 属性和方法 也可以使用 通过构造函数获取的父类的属性和方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="面试回答-2" tabindex="-1"><a class="header-anchor" href="#面试回答-2"><span>面试回答：</span></a></h4><p>ES5-组合继承</p><ol><li><p>组合继承的核心步骤有2步:</p><ol><li>通过原型链继承公共的属性和方法</li><li>通过构造函数继承实例独有的属性和方法</li></ol></li><li><p>组合继承的特点:调用2次父类的构造函数,浪费性能</p></li></ol><h3 id="es5-原型式继承" tabindex="-1"><a class="header-anchor" href="#es5-原型式继承"><span>ES5-原型式继承</span></a></h3><p>直接基于对象实现继承</p>`,29),f={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>**缺点:**父类中的引用数据类型，会被所有子类共享</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 可以用 Object.create替代</span>
<span class="token keyword">function</span> <span class="token function">objectFactory</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;parent&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
  <span class="token literal-property property">friend</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;rose&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;robot&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> son1 <span class="token operator">=</span> <span class="token function">objectFactory</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
<span class="token keyword">const</span> son2 <span class="token operator">=</span> <span class="token function">objectFactory</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
son1<span class="token punctuation">.</span>friend<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;lucy&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son2<span class="token punctuation">.</span>friend<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="面试回答-3" tabindex="-1"><a class="header-anchor" href="#面试回答-3"><span>面试回答:</span></a></h4><p>ES5-原型式继承</p><ol><li>原型式继承的核心步骤是:对某个对象进行浅拷贝,可以通过内置api<code>Object.create</code>实现,不需要调用构造函数即可实现继承,主要针对于继承对象的情况</li><li>原型式继承的缺点是:父类中的引用数据类型，会被所有子类共享</li></ol><h3 id="es5-寄生式继承" tabindex="-1"><a class="header-anchor" href="#es5-寄生式继承"><span>ES5-寄生式继承</span></a></h3><p><strong>核心步骤:</strong></p><p>定义工厂函数,并在内部:</p><ol><li>对传入的对象进行浅拷贝(公共属性/方法)</li><li>为浅拷贝对象增加属性/方法(独有属性/方法)</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Object.create基于原型创建新对象，对属性进行浅拷贝</span>
  <span class="token keyword">const</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span>
  <span class="token comment">// 为对象增加属性/方法</span>
  clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;你好&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> clone
<span class="token punctuation">}</span>
<span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;parent&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">foods</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;西蓝花&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;炒蛋&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;花菜&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> son1 <span class="token operator">=</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
<span class="token keyword">const</span> son2 <span class="token operator">=</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="面试回答-4" tabindex="-1"><a class="header-anchor" href="#面试回答-4"><span>面试回答:</span></a></h4><p>寄生式继承</p><ol><li><p>寄生式继承的核心步骤是:基于对象创建新对象(可以使用<code>Object.create</code>),并且为新创建的对象增加新的属性和方法</p></li><li><p>寄生式继承和上一节学习的原型式继承的区别是:创建出来的新对象,会额外的增加新的<strong>属性/方法</strong></p></li></ol><h3 id="es5-寄生组合式继承" tabindex="-1"><a class="header-anchor" href="#es5-寄生组合式继承"><span>ES5-寄生组合式继承</span></a></h3><p>所谓寄生组合式继承，即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。其背 后的基本思路是:不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型 原型的一个副本而已。</p><p><strong>核心步骤:</strong></p><ol><li>通过构造函数来继承属性</li><li>通过原型链来继承方法</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 继承原型函数</span>
<span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">son<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> prototype <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
    prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> son
    son<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype
<span class="token punctuation">}</span>

<span class="token comment">// 父类</span>
<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>foods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;西蓝花&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;西葫芦&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;西红柿&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我喜欢吃,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>foods<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类借用父类的构造函数</span>
<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token comment">// 完成原型继承</span>
<span class="token function">inheritPrototype</span><span class="token punctuation">(</span>Son<span class="token punctuation">,</span>Parent<span class="token punctuation">)</span>
<span class="token comment">// 可以继续在原型上添加属性/方法</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我的年龄是&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> son1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> son2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">&#39;rose&#39;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="面试回答-5" tabindex="-1"><a class="header-anchor" href="#面试回答-5"><span>面试回答:</span></a></h4><p>ES5-寄生组合式继承</p><ol><li>寄生组合式继承的核心步骤是:通过构造函数来继承属性,通过原型链来继承方法</li><li>寄生组合式继承和组合式继承的区别是:原型链的继承并没有调用父类的构造函数,而是直接基于父类的原型创建一个新副本实现继承</li></ol><h2 id="js继承-es6" tabindex="-1"><a class="header-anchor" href="#js继承-es6"><span>JS继承-ES6</span></a></h2>`,22),w=n("p",null,"这一节咱们来学习在ES6中class关键字的使用,并且使用它来实现继承",-1),_={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class",target:"_blank",rel:"noopener noreferrer"},j={href:"https://wangdoc.com/es6/class",target:"_blank",rel:"noopener noreferrer"},S={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super",target:"_blank",rel:"noopener noreferrer"},E=e('<p>ES6中推出了<code>class</code>类,是用来创建对象的模板.<code>class</code>可以看作是一个语法糖,它的绝大部分功能，ES5 都可以做到，新的<code>class</code>写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p><p>这一节咱们会学习:</p><ol><li>class核心语法</li><li>class实现继承</li><li>class语法补充</li></ol><h3 id="class核心语法" tabindex="-1"><a class="header-anchor" href="#class核心语法"><span>class核心语法</span></a></h3><p><strong>核心语法:</strong></p>',5),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes#%E7%B1%BB%E5%A3%B0%E6%98%8E",target:"_blank",rel:"noopener noreferrer"},P=n("li",null,"如何定义实例属性/方法:",-1),z=e(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定义类</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token comment">// 实例属性，方便一眼确认有哪些</span>
  name
  food
  <span class="token comment">// 构造方法，类似于构造函数，new的时候会调用，内部的this就是实例化的对象</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> food</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>food <span class="token operator">=</span> food
  <span class="token punctuation">}</span>

  <span class="token comment">// 实例方法</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你好，我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,我喜欢吃</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>food<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;小黑&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;西蓝花&#39;</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="面试回答-6" tabindex="-1"><a class="header-anchor" href="#面试回答-6"><span>面试回答:</span></a></h4><p>class核心语法:</p><ol><li>通过<code>class 类名{}</code>的形式来定义类</li><li>内部直接写实例属性,可以设置默认值,</li><li>实例方法的添加方式为<code>方法名(){}</code></li><li>构造函数通过<code>constructor</code>进行添加</li><li>通过<code>new 类名()</code>创建实例,会调用构造函数<code>constructor</code></li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    name
    food<span class="token operator">=</span><span class="token string">&#39;西兰花炒蛋&#39;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name
    <span class="token punctuation">}</span>
	<span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;你好,我叫:&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="class实现继承" tabindex="-1"><a class="header-anchor" href="#class实现继承"><span>class实现继承</span></a></h3><p><strong>关键语法:</strong></p>`,7),J=n("strong",null,"子类",-1),C={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/extends",target:"_blank",rel:"noopener noreferrer"},N=n("strong",null,"父类",-1),O={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super",target:"_blank",rel:"noopener noreferrer"},A=e(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 在上一份代码的基础上继续编写下面代码</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  song
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> food<span class="token punctuation">,</span> song</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 子类构造函数使用this以前必须调用super</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> food<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>song <span class="token operator">=</span> song
  <span class="token punctuation">}</span>
  <span class="token comment">// 添加方法</span>
  <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,我喜欢唱</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>song<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&#39;李雷&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;花菜&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;孤勇者&#39;</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="面试回答-7" tabindex="-1"><a class="header-anchor" href="#面试回答-7"><span>面试回答:</span></a></h4><p>class实现继承</p><ol><li>子类通过<code>extends</code>继承继承父类</li><li>子类如果需要重新定义构造函数,必须在内部通过<code>super</code>关键字调用父类的构造函数</li></ol><h3 id="class私有-静态属性和方法" tabindex="-1"><a class="header-anchor" href="#class私有-静态属性和方法"><span>class私有,静态属性和方法</span></a></h3><p><strong>补充语法:</strong></p>`,6),B={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/Private_class_fields",target:"_blank",rel:"noopener noreferrer"},F={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/static",target:"_blank",rel:"noopener noreferrer"},R=e(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
  <span class="token comment">// 通过#作为前缀添加的属性会变为私有</span>
  <span class="token comment">// 私有属性</span>
  #secret <span class="token operator">=</span> <span class="token string">&#39;我有一个小秘密，就不告诉你&#39;</span>
  <span class="token comment">// 私有方法</span>
  <span class="token function">#say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 私有属性可以在</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;私有的say方法&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在类的内部可以访问私有属性调用私有方法</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#secret<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">#say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 通过 static定义静态属性/方法</span>
  <span class="token keyword">static</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是一个静态方法&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> info <span class="token operator">=</span> <span class="token string">&#39;直立行走，双手双脚&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
<span class="token comment">// 外部无法访问 点语法访问直接报错，通过[]无法动态获取</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token string">&#39;#secret&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 通过类访问静态属性/方法</span>
Person<span class="token punctuation">.</span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>info<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="面试回答-8" tabindex="-1"><a class="header-anchor" href="#面试回答-8"><span>面试回答:</span></a></h4><p>class语法补充</p><ol><li><p>class中私有属性/方法</p><ol><li><strong>定义和使用时</strong>需要使用关键字<code>#</code></li><li>私有属性只能在类的内部使用,外部无法使用(代码中)</li><li><strong>Chrome</strong>的控制台中为了方便调试,可以直接访问</li></ol></li><li><p>class中静态属性/方法</p><ol><li><strong>定义和使用时</strong>需要使用关键字<code>static</code></li><li>通过类访问</li><li>静态方法中的<code>this</code>是类</li></ol></li></ol>`,4);function W(H,$){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,r,n("blockquote",null,[k,n("p",null,[n("a",d,[s("传送门:继承与原型链"),t(a)])]),n("p",null,[n("a",v,[s("传送门:继承（计算机科学）"),t(a)])]),n("p",null,[n("a",m,[s("传送门:JavaScript高级程序设计"),t(a)])]),n("p",null,[n("a",b,[s("传送门:MDN-Object.create"),t(a)])]),n("p",null,[n("a",h,[s("传送门:MDN-Object.assign"),t(a)])])]),g,n("p",null,[s("**核心步骤:**对某个对象进行浅拷贝(工厂函数或"),n("a",f,[s("Object.create"),t(a)]),s("),实现继承")]),y,n("blockquote",null,[w,n("p",null,[n("a",_,[s("传送门:mdn类"),t(a)])]),n("p",null,[n("a",j,[s("传送门:阮一峰ES6-class"),t(a)])]),n("p",null,[n("a",S,[s("传送门:mdn-super"),t(a)])])]),E,n("ol",null,[n("li",null,[s("如何定义及使用"),n("a",x,[s("类"),t(a)]),s(":")]),P]),z,n("ol",null,[n("li",null,[J,s("通过"),n("a",C,[s("extends"),t(a)]),s("继承"),N]),n("li",null,[s("子类构造函数中通过"),n("a",O,[s("super"),t(a)]),s("调用父类构造函数")])]),A,n("ol",null,[n("li",null,[n("a",B,[s("私有"),t(a)]),s("属性/方法的定义及使用(内部调用)")]),n("li",null,[n("a",F,[s("静态"),t(a)]),s("属性/方法的定义及使用(类直接访问)")])]),R])}const T=p(i,[["render",W],["__file","继承.html.vue"]]),V=JSON.parse('{"path":"/base/%E7%BB%A7%E6%89%BF.html","title":"JS 继承","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"JS继承-ES5","slug":"js继承-es5","link":"#js继承-es5","children":[{"level":3,"title":"ES5-原型链实现继承","slug":"es5-原型链实现继承","link":"#es5-原型链实现继承","children":[]},{"level":3,"title":"ES5-构造函数继承","slug":"es5-构造函数继承","link":"#es5-构造函数继承","children":[]},{"level":3,"title":"ES5-组合继承","slug":"es5-组合继承","link":"#es5-组合继承","children":[]},{"level":3,"title":"ES5-原型式继承","slug":"es5-原型式继承","link":"#es5-原型式继承","children":[]},{"level":3,"title":"ES5-寄生式继承","slug":"es5-寄生式继承","link":"#es5-寄生式继承","children":[]},{"level":3,"title":"ES5-寄生组合式继承","slug":"es5-寄生组合式继承","link":"#es5-寄生组合式继承","children":[]}]},{"level":2,"title":"JS继承-ES6","slug":"js继承-es6","link":"#js继承-es6","children":[{"level":3,"title":"class核心语法","slug":"class核心语法","link":"#class核心语法","children":[]},{"level":3,"title":"class实现继承","slug":"class实现继承","link":"#class实现继承","children":[]},{"level":3,"title":"class私有,静态属性和方法","slug":"class私有-静态属性和方法","link":"#class私有-静态属性和方法","children":[]}]}],"filePathRelative":"base/继承.md","git":{"createdTime":1716817467000,"updatedTime":1716817467000,"contributors":[{"name":"xiaoyu","email":"luoyu2003@outlook.com","commits":1}]},"readingTime":{"minutes":8.62,"words":2586}}');export{T as comp,V as data};
